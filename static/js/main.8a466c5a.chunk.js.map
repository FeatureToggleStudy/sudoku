{"version":3,"sources":["workers/GeneratePuzzle.worker.ts","serviceWorker.ts","store/types.ts","models/Difficulty.ts","models/Cell.ts","models/Row.ts","models/Analyzer.ts","models/Sudoku.ts","PuzzleStorage.ts","store/reducers.ts","models/Settings.ts","store/index.ts","presentation/SudokuCell.tsx","presentation/SudokuRow.tsx","presentation/Sudoku.tsx","presentation/Numbers.tsx","store/actions.ts","utils/ServiceWorkerUpdated.ts","presentation/TopBar.tsx","presentation/CompletedDialog.tsx","presentation/ExitPrompt.tsx","presentation/App.tsx","theme.ts","index.tsx"],"names":["module","exports","Worker","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","DIRECTION","MODE","DIFFICULTY","CHANGE_DIFFICULTY","NEW_GAME","VALIDATE_SOLUTION","TOGGLE_CELL","SET_DIGIT","REMOVE_DIGIT","NAVIGATE_CELLS","TOGGLE_NOTE_MODE","UNDO","REDO","TOGGLE_NIGHT_MODE","RESET_SUDOKU","FILL_CANDIDATES","CLEAR_CANDIDATES","TOGGLE_SETTING_USE_NOTES","TOGGLE_SETTING_MARK_COMPLETED","TOGGLE_SETTING_PROGRESS","TOGGLE_EXIT_PROMPT","NO_NOTES","Cell","previous","Object","classCallCheck","this","value","valid","solution","row","column","given","active","notes","calculateBlock","modifier","cell","digit","mode","Note","map","x","i","n","Row","cells","index","c","validate","setActive","isActive","getColumn","setDigit","removeDigit","clearNotes","data","toConsumableArray","_ref","_ref2","slicedToArray","create","Analyzer","rows","blocks","columns","v","_this$findParents","findParents","block","push","_this$segment","segment","candidates","_this$findParents2","candidate","isAvailable","flatData","reduce","s","findCandidates","result","Sudoku","activeCell","createdAt","sudoku","r","toggleCell","allNumbers","acc","next","getCells","getValue","solved","_loop","filter","length","dirrection","increment","val","decrement","objectSpread","Up","Down","Right","Left","activateCell","every","isSolved","flatMap","sum","getNotes","getCandidates","forEach","rowCandidates","cellCandidates","clearCandidates","Date","now","d","EMPTY_DATA","src_PuzzleStorage","PuzzleStorage","_this","worker","inititializeStorage","GeneratePuzzleWorker","e","addPuzzle","hasLocalStorageKeys","_puzzles","puzzles","defineProperty","VeryEasy","saveJSONPuzzles","Puzzles","Easy","Normal","Hard","VeryHard","save","localStorage","_this2","id","uuid","puzzle","decodedPuzle","difficulty","puzzleMap","load","shift","decodeStoredPuzzle","postMessage","message","puzzleData","key","setItem","JSON","stringify","parse","initialSettings","Settings","notesEnabled","nightModeEnabled","inputMode","progressEnabled","markCompletedNumbersEnabled","Input","readSettingsFromLocalStorage","settingsString","settings","keys","saveSettingsToLocalStorage","initialState","past","current","getPuzzle","Difficulty","future","showExitPrompt","rootReducer","combineReducers","game","arguments","undefined","action","type","setDifficulty","payload","force","InputMode","navigate","direction","setInputMode","slice","toggleNightModeEnabled","fillCandidates","NotesEnabled","toggleNotesEnabled","toggleMarkCompletedNumbersEnabled","toggleProgressEnabled","SudokuCellComponent","classes","props","react_default","a","createElement","className","container","onClick","handleClick","calculateClasses","renderContent","style","fontSize","size","Math","ceil","cellClasses","note1","note2","note3","note4","note5","note6","note7","note8","note9","Fragment","note","activeNote","inactiveNote","getRow","_result","getBlock","content","thickBorderTop","thickBorderBottom","thickBorderLeft","thickBorderRight","dark","isGiven","invalid","isValid","join","Component","withStyles","theme","borderThin","palette","primary","borderThick","createStyles","display","position","width","paddingBottom","textAlign","userSelect","fontFamily","justifyContent","alignItems","top","right","bottom","left","borderRight","borderBottom","color","grey","borderTop","borderLeft","backgroundColor","light","fontWeight","opacity","contrastText","SudokuRowComponent","sudokuRow","renderRow","SudokuCell","getCellSize","rowSize","SudokuComponent","possibleConstructorReturn","getPrototypeOf","call","containerRef","setCellSize","rowDOM","boundingRectangle","getBoundingClientRect","height","smallestDimmesion","fittedDimmension","floor","setState","requestAnimationFrame","React","createRef","menuAnchor","index_es","cardContent","ref","renderRows","toolbar","toolbarButton","disabled","undo","Undo_default","Clear_default","redo","Redo_default","_this3","getRows","SudokuRow","milliSeconds","pad","num","round","toString","padStart","seconds","minutes","hours","padding","marginLeft","marginRight","@media (orientation: portrait)","spacing","unit","@media (orientation: landscape)","header","headerButton","INumbers","longPressTimeout","clickHandledByLongPress","setTimeout","clearTimeout","countEmptyCells","showRedProgressBar","Array","isDigitCompleted","MarkCompletedNumbersEnabled","Chip_default","onMouseDown","mouseDownHandler","onTouchStart","onMouseUp","mouseUpHandler","onTouchEnd","chip","label","ProgressEnabled","progress","bar","errorBar","variant","getProgress","paddingTop","borderBottomRightRadius","borderBottomLeftRadius","successBar","margin","toggleExitPrompt","resolvePromise","updateExistsPromise","Promise","resolve","reject","registerUpdate","DIFFICUTIES","TopBar","drawerOpen","difficultyOpen","helpOpen","hasUpdates","featuresOpen","ServiceWorkerUpdated","AppBar_default","Toolbar_default","IconButton_default","menuButton","openDrawer","Menu_default","Typography_default","grow","getBarText","FormControlLabel_default","notesToggle","labelPlacement","toggleNightMode","control","Switch_default","checked","NightModeEnabled","Drawer_default","paper","drawerPaper","open","onClose","closeDrawer","drawerHeader","ChevronLeft_default","List_default","drawerList","ListSubheader_default","listHeader","ListItem_default","button","createNewGame","ListItemIcon_default","Casino_default","ListItemText_default","reset","Replay_default","toggleHelp","Help_default","ExpandLess_default","subMenuButton","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","disablePadding","toggleDifficulty","FitnessCenter_default","renderDifficulties","toggleFeatures","Settings_default","feature","toggleMarkCompleted","toggleProgress","forceRefresh","SyncProblem_default","option","selected","changeDifficulty","validateSolution","_this4","find","resetSudoku","getRegistration","clear","_drawerPaper","flexGrow","modeFab","zIndex","paddingLeft","paddingRight","secondary","main","breakpoints","down","minWidth","up","background","default","textTransform","common","white","ellapsedTime","formatMillisecons","getCreationTimestamp","disableBackdropClick","disableEscapeKeyDown","maxWidth","fullWidth","gutterBottom","difficultyText","history","pushState","toggle","App","handleKeyboard","which","navigateCells","nightMode","t","createMuiTheme","typography","useNextVariants","MuiThemeProvider_default","CssBaseline_default","presentation_TopBar","presentation_Sudoku","Numbers","presentation_CompletedDialog","presentation_ExitPrompt","document","removeEventListener","connect","setMode","TOGGLE_SETTING_NOTES_ENABLED","store","createStore","ReactDOM","render","es","presentation_App","getElementById","dispatch"],"mappings":"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","file":"static/js/main.8a466c5a.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"b96a843152969089af28.worker.js\");\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Sudoku from '../models/Sudoku';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport Settings from '../models/Settings';\r\n\r\nexport interface IGameState {\r\n  sudoku: {\r\n    past: Sudoku[];\r\n    current: Sudoku;\r\n    future: Sudoku[];\r\n  };\r\n  settings: Settings;\r\n  showExitPrompt: boolean;\r\n}\r\n\r\nexport enum DIRECTION {\r\n  Up,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n\r\nexport enum MODE {\r\n  Input,\r\n  Note\r\n}\r\n\r\nexport const CHANGE_DIFFICULTY = 'CHANGE_DIFFICULTY';\r\nexport const NEW_GAME = 'NEW_GAME';\r\nexport const VALIDATE_SOLUTION = 'VALIDATE_SOLUTION';\r\nexport const TOGGLE_CELL = 'TOGGLE_CELLs';\r\nexport const SET_DIGIT = 'SET_DIGIT';\r\nexport const REMOVE_DIGIT = 'REMOVE_DIGIT';\r\nexport const NAVIGATE_CELLS = 'NAVIGATE_CELLS';\r\nexport const TOGGLE_NOTE_MODE = 'TOGGLE_NOTE_MODE';\r\nexport const UNDO = 'UNDO';\r\nexport const REDO = 'REDO';\r\nexport const TOGGLE_NIGHT_MODE = 'TOGGLE_NIGHT_MODE';\r\nexport const RESET_SUDOKU = 'RESET_SUDOKU';\r\nexport const FILL_CANDIDATES = 'FILL_CANDIDATES';\r\nexport const CLEAR_CANDIDATES = 'CLEAR_CANDIDATES';\r\nexport const TOGGLE_SETTING_USE_NOTES = 'TOGGLE_SETTING_USE_NOTES';\r\nexport const TOGGLE_SETTING_MARK_COMPLETED = 'TOGGLE_SETTING_MARK_COMPLETED';\r\nexport const TOGGLE_SETTING_PROGRESS = 'TOGGLE_SETTING_PROGRESS';\r\nexport const TOGGLE_EXIT_PROMPT = 'TOGGLE_EXIT_PROMPT';\r\n\r\ninterface IChangeDifficultyAction {\r\n  type: typeof CHANGE_DIFFICULTY;\r\n  payload: DIFFICULTY;\r\n}\r\n\r\ninterface INewGameAction {\r\n  type: typeof NEW_GAME;\r\n}\r\n\r\ninterface IValidateSolutionAction {\r\n  type: typeof VALIDATE_SOLUTION;\r\n}\r\n\r\ninterface IToggleCellAction {\r\n  type: typeof TOGGLE_CELL;\r\n  payload: {\r\n    row: number;\r\n    column: number;\r\n  };\r\n}\r\n\r\ninterface ISetDigitAction {\r\n  type: typeof SET_DIGIT;\r\n  payload: {\r\n    digit: number;\r\n    force: boolean;\r\n  };\r\n}\r\n\r\ninterface IRemoveDigitAction {\r\n  type: typeof REMOVE_DIGIT;\r\n}\r\n\r\ninterface INavigateCellsAction {\r\n  type: typeof NAVIGATE_CELLS;\r\n  payload: {\r\n    direction: DIRECTION;\r\n  };\r\n}\r\n\r\ninterface ISetModeAction {\r\n  type: typeof TOGGLE_NOTE_MODE;\r\n  payload: {\r\n    mode: MODE;\r\n  };\r\n}\r\ninterface IUndoAction {\r\n  type: typeof UNDO;\r\n}\r\ninterface IRedoAction {\r\n  type: typeof REDO;\r\n}\r\ninterface IToggleNightModeAction {\r\n  type: typeof TOGGLE_NIGHT_MODE;\r\n}\r\n\r\ninterface IResetSudokuAction {\r\n  type: typeof RESET_SUDOKU;\r\n}\r\n\r\ninterface IFillCandidatesAction {\r\n  type: typeof FILL_CANDIDATES;\r\n}\r\n\r\ninterface IClearCandidatesAction {\r\n  type: typeof CLEAR_CANDIDATES;\r\n}\r\n\r\ninterface IToggleNotesEnabledAction {\r\n  type: typeof TOGGLE_SETTING_USE_NOTES;\r\n}\r\n\r\ninterface IToggleMarkCompletedAction {\r\n  type: typeof TOGGLE_SETTING_MARK_COMPLETED;\r\n}\r\n\r\ninterface IToggleProgressAction {\r\n  type: typeof TOGGLE_SETTING_PROGRESS;\r\n}\r\n\r\ninterface IToggleExitPrompt {\r\n  type: typeof TOGGLE_EXIT_PROMPT;\r\n}\r\n\r\nexport type OptionActions =\r\n  | IChangeDifficultyAction\r\n  | INewGameAction\r\n  | IValidateSolutionAction\r\n  | IToggleCellAction\r\n  | ISetDigitAction\r\n  | IRemoveDigitAction\r\n  | INavigateCellsAction\r\n  | ISetModeAction\r\n  | IUndoAction\r\n  | IRedoAction\r\n  | IToggleNightModeAction\r\n  | IResetSudokuAction\r\n  | IFillCandidatesAction\r\n  | IClearCandidatesAction\r\n  | IToggleNotesEnabledAction\r\n  | IToggleMarkCompletedAction\r\n  | IToggleProgressAction\r\n  | IToggleExitPrompt;\r\n","export enum DIFFICULTY {\r\n  VeryEasy = 30,\r\n  Easy = 36,\r\n  Normal = 42,\r\n  Hard = 50,\r\n  VeryHard = 57\r\n}\r\n","import { MODE } from '../store/types';\r\n\r\nconst NO_NOTES = [false, false, false, false, false, false, false, false, false];\r\n\r\nexport default class Cell {\r\n  private value: number | null;\r\n  private valid: boolean;\r\n  private solution: number;\r\n  private row: number;\r\n  private column: number;\r\n  private given: boolean;\r\n  private active: boolean;\r\n  private notes: boolean[];\r\n\r\n  private constructor(previous?: Cell) {\r\n    this.value = previous ? previous.value : null;\r\n    this.solution = previous ? previous.solution : -1;\r\n    this.row = previous ? previous.row : -1;\r\n    this.column = previous ? previous.column : -1;\r\n    this.given = previous ? previous.given : false;\r\n    this.active = previous ? previous.active : false;\r\n    this.valid = previous ? previous.valid : true;\r\n    this.notes = previous ? previous.notes : [...NO_NOTES];\r\n  }\r\n\r\n  static create(solution: number, row: number, column: number, given: boolean): Cell {\r\n    const cell = new Cell();\r\n    cell.solution = solution;\r\n    cell.row = row;\r\n    cell.column = column;\r\n    cell.given = given;\r\n    cell.value = given ? solution : null;\r\n    return cell;\r\n  }\r\n\r\n  public getSolution(): number {\r\n    return this.solution;\r\n  }\r\n\r\n  public getValue(): number | null {\r\n    return this.value;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public getBlock(): number {\r\n    if (this.row <= 3) {\r\n      return this.calculateBlock(0);\r\n    } else if (this.row >= 4 && this.row <= 6) {\r\n      return this.calculateBlock(1);\r\n    } else {\r\n      return this.calculateBlock(2);\r\n    }\r\n  }\r\n\r\n  private calculateBlock(modifier: number): number {\r\n    if (this.column <= 3) {\r\n      return modifier + 1;\r\n    } else if (this.column >= 4 && this.column <= 6) {\r\n      return modifier + 2;\r\n    } else {\r\n      return modifier + 3;\r\n    }\r\n  }\r\n\r\n  public isGiven(): boolean {\r\n    return this.given;\r\n  }\r\n\r\n  public validate(): Cell {\r\n    const cell = new Cell(this);\r\n    cell.valid = this.value === null || this.value === this.solution;\r\n    if (!cell.valid) {\r\n      cell.active = false;\r\n    }\r\n    return cell;\r\n  }\r\n\r\n  public isValid(): boolean {\r\n    return this.valid;\r\n  }\r\n\r\n  public setActive(active: boolean): Cell {\r\n    const cell = new Cell(this);\r\n    cell.active = active;\r\n    return cell;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    if (mode === MODE.Note) {\r\n      cell.notes = this.notes.map((x, i) => (i === digit - 1 ? !x : x));\r\n      cell.value = null;\r\n    } else {\r\n      cell.value = this.value === digit ? null : digit;\r\n    }\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public removeDigit(): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    cell.notes = [...NO_NOTES];\r\n    cell.value = null;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.value === this.solution;\r\n  }\r\n\r\n  public getNotes(): boolean[] {\r\n    return this.notes;\r\n  }\r\n\r\n  public clearNotes(): Cell {\r\n    const cell = new Cell(this);\r\n    cell.notes = cell.notes.map(n => false);\r\n    return cell;\r\n  }\r\n}\r\n","import Cell from './Cell';\r\nimport { DIRECTION, MODE } from '../store/types';\r\n\r\nexport default class Row {\r\n  private cells: Cell[];\r\n  private index: number;\r\n  private active: boolean;\r\n\r\n  private constructor(previous?: Row) {\r\n    this.index = previous ? previous.index : -1;\r\n    this.active = previous ? previous.active : false;\r\n    this.cells = previous ? previous.cells : [];\r\n  }\r\n\r\n  static create(data: [number, boolean][], index: number): Row {\r\n    const row = new Row();\r\n    row.cells = [...data.map(([value, given], i) => Cell.create(value, index, i + 1, given))];\r\n    row.index = index;\r\n    return row;\r\n  }\r\n\r\n  public getCells(): Cell[] {\r\n    return this.cells;\r\n  }\r\n\r\n  public validate(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.validate());\r\n    return row;\r\n  }\r\n\r\n  public getIndex(): number {\r\n    return this.index;\r\n  }\r\n\r\n  public toggleCell(index: number, column: number): Row {\r\n    if (this.index !== index && !this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n\r\n    if (this.active) {\r\n      if (this.index === index) {\r\n        row.cells = this.cells.map(c => {\r\n          return c.setActive(c.isActive() ? false : c.getColumn() === column);\r\n        });\r\n      } else {\r\n        row.active = false;\r\n        row.cells = this.cells.map(c => (c.isActive() ? c.setActive(false) : c));\r\n      }\r\n    } else if (this.index === index) {\r\n      row.active = true;\r\n      row.cells = this.cells.map(c => (c.getColumn() === column ? c.setActive(true) : c));\r\n    }\r\n    return row;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.setDigit(digit, mode));\r\n    return row;\r\n  }\r\n\r\n  public removeDigit(): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.removeDigit());\r\n    return row;\r\n  }\r\n\r\n  public clearCandidates(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.clearNotes());\r\n    return row;\r\n  }\r\n}\r\n","export default class Analyzer {\r\n  constructor(private data: nullber[][]) {}\r\n\r\n  private segment<T>(data: T[]): segments<T> {\r\n    const rows: T[][] = [[], [], [], [], [], [], [], [], []];\r\n    const blocks: T[][] = [[], [], [], [], [], [], [], [], []];\r\n    const columns: T[][] = [[], [], [], [], [], [], [], [], []];\r\n\r\n    for (let i = 0; i < 81; i++) {\r\n      const v = data[i];\r\n      const { row, column, block } = this.findParents(i);\r\n      rows[row].push(v);\r\n      blocks[block].push(v);\r\n      columns[column].push(v);\r\n    }\r\n\r\n    return {\r\n      rows,\r\n      blocks,\r\n      columns\r\n    };\r\n  }\r\n\r\n  private findParents(index: number): { row: number; column: number; block: number } {\r\n    const row = ~~(index / 9);\r\n    const column = index % 9;\r\n    const block = ~~(row / 3) * 3 + ~~(column / 3);\r\n\r\n    return {\r\n      block,\r\n      row,\r\n      column\r\n    };\r\n  }\r\n\r\n  private findCandidates(data: nullber[]) {\r\n    const { rows, blocks, columns } = this.segment(data);\r\n    const candidates: number[][] = [];\r\n    for (let i = 0; i < 81; i++) {\r\n      const value = data[i];\r\n      candidates[i] = [];\r\n      if (value !== null) {\r\n        candidates[i].push(value);\r\n      } else {\r\n        const { row, column, block } = this.findParents(i);\r\n        for (let candidate = 1; candidate <= 9; candidate++) {\r\n          if (this.isAvailable(blocks[block], rows[row], columns[column], candidate)) {\r\n            candidates[i].push(candidate);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return candidates;\r\n  }\r\n\r\n  private isAvailable(block: nullber[], row: nullber[], column: nullber[], value: number): boolean {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (block[i] === value || row[i] === value || column[i] === value) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public getCandidates(): number[][][] {\r\n    const flatData = this.data.reduce((s, x) => s.concat(x), []);\r\n    const candidates = this.findCandidates(flatData);\r\n    const result = [] as number[][][];\r\n    for (let row = 0; row < 9; row++) {\r\n      result[row] = [];\r\n      for (let column = 0; column < 9; column++) {\r\n        result[row][column] = candidates[row * 9 + column];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\ntype nullber = number | null;\r\n\r\ntype segments<T> = {\r\n  rows: T[][];\r\n  blocks: T[][];\r\n  columns: T[][];\r\n};\r\n","import Row from './Row';\r\nimport { DIRECTION, MODE } from '../store/types';\r\nimport Cell from './Cell';\r\nimport Analyzer from './Analyzer';\r\n\r\nexport default class Sudoku {\r\n  private rows: Row[];\r\n  private activeCell: { row: number; column: number };\r\n  private createdAt: number;\r\n\r\n  private constructor(previous?: Sudoku) {\r\n    this.rows = previous ? previous.rows : [];\r\n    this.activeCell = previous ? previous.activeCell : { row: -1, column: -1 };\r\n    this.createdAt = previous ? previous.createdAt : 0;\r\n  }\r\n\r\n  static create(data: ([number, boolean])[][]): Sudoku {\r\n    const sudoku = new Sudoku();\r\n    sudoku.createdAt = Date.now();\r\n    sudoku.rows = data.map((d, i) => Row.create(d, i + 1));\r\n    return sudoku;\r\n  }\r\n\r\n  public getRows(): Row[] {\r\n    return this.rows;\r\n  }\r\n\r\n  public validate(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.validate());\r\n    return sudoku;\r\n  }\r\n\r\n  public activateCell(row: number, column: number): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    if (sudoku.activeCell.row === row && sudoku.activeCell.column === column) {\r\n      sudoku.activeCell = { row: -1, column: -1 };\r\n    } else {\r\n      sudoku.activeCell = { row, column };\r\n    }\r\n    sudoku.rows = this.rows.map(r => r.toggleCell(row, column));\r\n    return sudoku;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.setDigit(digit, mode));\r\n    return sudoku;\r\n  }\r\n\r\n  public removeDigit(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.removeDigit());\r\n    return sudoku;\r\n  }\r\n\r\n  public getSolvedNumbers(): number[] {\r\n    const allNumbers = this.rows.reduce(\r\n      (acc: number[], next: Row) => acc.concat(next.getCells().map(c => c.getValue() || 0), []),\r\n      []\r\n    );\r\n    const solved = [];\r\n    for (let i = 1; i <= 9; i++) {\r\n      if (allNumbers.filter(n => n === i).length === 9) {\r\n        solved.push(i);\r\n      }\r\n    }\r\n    return solved;\r\n  }\r\n\r\n  public navigate(dirrection: DIRECTION): Sudoku {\r\n    const increment = (val: number) => (val === 9 ? 1 : val + 1);\r\n    const decrement = (val: number) => (val === 1 ? 9 : val - 1);\r\n    const activeCell = { ...this.activeCell };\r\n\r\n    switch (dirrection) {\r\n      case DIRECTION.Up:\r\n        activeCell.row = decrement(activeCell.row);\r\n        break;\r\n      case DIRECTION.Down:\r\n        activeCell.row = increment(activeCell.row);\r\n        break;\r\n      case DIRECTION.Right:\r\n        activeCell.column = increment(activeCell.column);\r\n        break;\r\n      case DIRECTION.Left:\r\n        activeCell.column = decrement(activeCell.column);\r\n        break;\r\n    }\r\n    return this.activateCell(activeCell.row, activeCell.column);\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.rows.every(r => r.getCells().every(c => c.isSolved()));\r\n  }\r\n\r\n  public getCreationTimestamp(): number {\r\n    return this.createdAt;\r\n  }\r\n\r\n  public isDigitCompleted(digit: number): boolean {\r\n    return this.rows.flatMap(r => r.getCells().filter(c => c.getValue() === digit)).length === 9;\r\n  }\r\n\r\n  public countEmptyCells(): number {\r\n    const cells = this.rows.reduce((acc, row) => acc.concat(row.getCells()), [] as Cell[]);\r\n    return cells.reduce((sum, cell) => {\r\n      if (cell.getValue() === null) {\r\n        return sum + 1;\r\n      }\r\n      return sum;\r\n    }, 0);\r\n  }\r\n\r\n  public fillCandidates(): Sudoku {\r\n    const notes = this.rows.map(r => r.getCells().map(c => c.getNotes()));\r\n    const data = this.rows.map(r => r.getCells().map(c => c.getValue()));\r\n    const analyzer = new Analyzer(data);\r\n    const candidates = analyzer.getCandidates();\r\n    let sudoku = new Sudoku(this);\r\n    if (sudoku.activeCell.row !== -1 && sudoku.activeCell.column !== -1) {\r\n      sudoku = sudoku.activateCell(sudoku.activeCell.row, sudoku.activeCell.column);\r\n    }\r\n    candidates.forEach((rowCandidates, row) => {\r\n      rowCandidates.forEach((cellCandidates, cell) => {\r\n        sudoku = sudoku.activateCell(row + 1, cell + 1);\r\n        cellCandidates.forEach(candidate => {\r\n          if (data[row][cell] === null && !notes[row][cell][candidate - 1]) {\r\n            sudoku = sudoku.setDigit(candidate, MODE.Note);\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return sudoku;\r\n  }\r\n\r\n  public clearCandidates(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = sudoku.rows.map(row => row.clearCandidates());\r\n    return sudoku;\r\n  }\r\n}\r\n","import Puzzles from './puzzles.json';\r\nimport { DIFFICULTY } from './models/Difficulty';\r\nimport Sudoku from './models/Sudoku';\r\nimport GeneratePuzzleWorker from './workers/GeneratePuzzle.worker';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst EMPTY_DATA: [number, boolean][][] = [\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ]\r\n];\r\n\r\nconst PUZZLE_MAP_KEY = 'PUZZLE-MAP';\r\nconst BUFFER_SIZE = 20;\r\n\r\ntype idMap = { [key: number]: string[] };\r\ntype serializedPuzzle = (number | boolean)[][][];\r\n\r\nclass PuzzleStorage {\r\n  private worker: Worker;\r\n\r\n  constructor() {\r\n    this.inititializeStorage();\r\n    this.worker = new GeneratePuzzleWorker() as Worker;\r\n    this.worker.addEventListener('message', e => this.addPuzzle(e));\r\n  }\r\n\r\n  private inititializeStorage() {\r\n    if (!this.hasLocalStorageKeys()) {\r\n      const puzzles: idMap = {\r\n        [DIFFICULTY.VeryEasy]: this.saveJSONPuzzles(Puzzles.VeryEasy),\r\n        [DIFFICULTY.Easy]: this.saveJSONPuzzles(Puzzles.Easy),\r\n        [DIFFICULTY.Normal]: this.saveJSONPuzzles(Puzzles.Normal),\r\n        [DIFFICULTY.Hard]: this.saveJSONPuzzles(Puzzles.Hard),\r\n        [DIFFICULTY.VeryHard]: this.saveJSONPuzzles(Puzzles.VeryHard)\r\n      };\r\n      this.save(PUZZLE_MAP_KEY, puzzles);\r\n    }\r\n  }\r\n\r\n  private hasLocalStorageKeys(): boolean {\r\n    return !!window.localStorage[PUZZLE_MAP_KEY];\r\n  }\r\n\r\n  private saveJSONPuzzles(puzzles: serializedPuzzle[]): string[] {\r\n    return puzzles.map(p => {\r\n      const id = uuid();\r\n      this.save(id, p);\r\n      return id;\r\n    });\r\n  }\r\n\r\n  private decodeStoredPuzzle(puzzle: serializedPuzzle): Sudoku {\r\n    const decodedPuzle = [[], [], [], [], [], [], [], [], []] as [number, boolean][][];\r\n    puzzle.forEach((row, i) => {\r\n      decodedPuzle[i] = row.map(([value, given]) => [value, given] as [number, boolean]);\r\n    });\r\n    return Sudoku.create(decodedPuzle);\r\n  }\r\n\r\n  public getPuzzle(difficulty: DIFFICULTY): Sudoku {\r\n    const puzzleMap = this.load<idMap>(PUZZLE_MAP_KEY);\r\n    const id = puzzleMap[difficulty].shift();\r\n    if (!id) {\r\n      return Sudoku.create(EMPTY_DATA);\r\n    }\r\n    const puzzle = this.load<serializedPuzzle>(id);\r\n    const sudoku = this.decodeStoredPuzzle(puzzle);\r\n    this.save(PUZZLE_MAP_KEY, puzzleMap);\r\n    this.worker.postMessage(difficulty);\r\n\r\n    if (!!sudoku) {\r\n      return sudoku;\r\n    }\r\n    return Sudoku.create(EMPTY_DATA);\r\n  }\r\n\r\n  private addPuzzle(message: MessageEvent): void {\r\n    const difficulty = message.data.difficulty as DIFFICULTY;\r\n    const data = message.data.puzzleData as [number, boolean][][];\r\n    const id = uuid();\r\n    const puzzleMap = this.load<idMap>(PUZZLE_MAP_KEY);\r\n    puzzleMap[difficulty].push(id);\r\n    this.save(id, data);\r\n    this.save(PUZZLE_MAP_KEY, puzzleMap);\r\n    if (puzzleMap[difficulty].length < BUFFER_SIZE) {\r\n      this.worker.postMessage(difficulty);\r\n    }\r\n  }\r\n\r\n  private save(key: string, data: any): void {\r\n    window.localStorage.setItem(key, JSON.stringify(data));\r\n  }\r\n\r\n  private load<T>(key: string): T {\r\n    return JSON.parse(window.localStorage[key]) as T;\r\n  }\r\n}\r\n\r\nexport default new PuzzleStorage();\r\n","import {\r\n  IGameState,\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  REMOVE_DIGIT,\r\n  TOGGLE_NOTE_MODE,\r\n  UNDO,\r\n  REDO,\r\n  MODE,\r\n  TOGGLE_NIGHT_MODE,\r\n  RESET_SUDOKU,\r\n  FILL_CANDIDATES,\r\n  CLEAR_CANDIDATES,\r\n  TOGGLE_SETTING_USE_NOTES,\r\n  TOGGLE_SETTING_MARK_COMPLETED,\r\n  TOGGLE_SETTING_PROGRESS,\r\n  TOGGLE_EXIT_PROMPT\r\n} from './types';\r\nimport PuzzleStorage from '../PuzzleStorage';\r\nimport Settings from '../models/Settings';\r\n\r\nconst initialSettings = new Settings();\r\nconst initialState: IGameState = {\r\n  sudoku: {\r\n    past: [],\r\n    current: PuzzleStorage.getPuzzle(initialSettings.Difficulty).activateCell(1, 1),\r\n    future: []\r\n  },\r\n  settings: initialSettings,\r\n  showExitPrompt: false\r\n};\r\n\r\nexport function gameReducer(state = initialState, action: OptionActions): IGameState {\r\n  switch (action.type) {\r\n    case TOGGLE_EXIT_PROMPT:\r\n      return {\r\n        ...state,\r\n        showExitPrompt: !state.showExitPrompt\r\n      };\r\n    case CHANGE_DIFFICULTY:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.setDifficulty(action.payload),\r\n        sudoku: {\r\n          past: [],\r\n          current: PuzzleStorage.getPuzzle(action.payload).activateCell(1, 1),\r\n          future: []\r\n        }\r\n      };\r\n    case NEW_GAME:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [],\r\n          current: PuzzleStorage.getPuzzle(state.settings.Difficulty).activateCell(1, 1),\r\n          future: []\r\n        }\r\n      };\r\n    case VALIDATE_SOLUTION:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.validate()\r\n        }\r\n      };\r\n    case TOGGLE_CELL:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.activateCell(action.payload.row, action.payload.column)\r\n        }\r\n      };\r\n    case SET_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.setDigit(\r\n            action.payload.digit,\r\n            action.payload.force\r\n              ? state.settings.InputMode === MODE.Input\r\n                ? MODE.Note\r\n                : MODE.Input\r\n              : state.settings.InputMode\r\n          ),\r\n          future: []\r\n        }\r\n      };\r\n    case REMOVE_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.removeDigit(),\r\n          future: []\r\n        }\r\n      };\r\n    case NAVIGATE_CELLS:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.navigate(action.payload.direction)\r\n        }\r\n      };\r\n    case TOGGLE_NOTE_MODE:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.setInputMode(action.payload.mode)\r\n      };\r\n    case UNDO:\r\n      if (!state.sudoku.past.length) {\r\n        return state;\r\n      }\r\n      const previous = state.sudoku.past.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: state.sudoku.past.slice(0, -1),\r\n          current: previous,\r\n          future: [...state.sudoku.future, state.sudoku.current]\r\n        }\r\n      };\r\n    case REDO:\r\n      if (!state.sudoku.future.length) {\r\n        return state;\r\n      }\r\n      const next = state.sudoku.future.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: next,\r\n          future: state.sudoku.future.slice(0, -1)\r\n        }\r\n      };\r\n    case TOGGLE_NIGHT_MODE:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.toggleNightModeEnabled()\r\n      };\r\n    case RESET_SUDOKU:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [],\r\n          current: state.sudoku.past.shift() || state.sudoku.current,\r\n          future: []\r\n        }\r\n      };\r\n    case FILL_CANDIDATES:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.fillCandidates(),\r\n          future: []\r\n        }\r\n      };\r\n    case CLEAR_CANDIDATES:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.clearCandidates(),\r\n          future: []\r\n        }\r\n      };\r\n    case TOGGLE_SETTING_USE_NOTES:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.settings.NotesEnabled\r\n            ? state.sudoku.current.clearCandidates()\r\n            : state.sudoku.current\r\n        },\r\n        settings: state.settings.toggleNotesEnabled()\r\n      };\r\n    case TOGGLE_SETTING_MARK_COMPLETED:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.toggleMarkCompletedNumbersEnabled()\r\n      };\r\n    case TOGGLE_SETTING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.toggleProgressEnabled()\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { MODE } from '../store/types';\r\nimport { DIFFICULTY } from './Difficulty';\r\n\r\nconst SETTINGS_KEY = 'SETTINGS';\r\n\r\nexport default class Settings {\r\n  private notesEnabled: boolean;\r\n  private nightModeEnabled: boolean;\r\n  private inputMode: MODE;\r\n  private difficulty: DIFFICULTY;\r\n  private progressEnabled: boolean;\r\n  private markCompletedNumbersEnabled: boolean;\r\n\r\n  constructor() {\r\n    this.notesEnabled = true;\r\n    this.nightModeEnabled = false;\r\n    this.inputMode = MODE.Input;\r\n    this.difficulty = DIFFICULTY.Normal;\r\n    this.progressEnabled = true;\r\n    this.markCompletedNumbersEnabled = true;\r\n    this.readSettingsFromLocalStorage();\r\n  }\r\n\r\n  public get NotesEnabled(): boolean {\r\n    return this.notesEnabled;\r\n  }\r\n\r\n  public get NightModeEnabled(): boolean {\r\n    return this.nightModeEnabled;\r\n  }\r\n\r\n  public get ProgressEnabled(): boolean {\r\n    return this.progressEnabled;\r\n  }\r\n\r\n  public get MarkCompletedNumbersEnabled(): boolean {\r\n    return this.markCompletedNumbersEnabled;\r\n  }\r\n\r\n  public get InputMode(): MODE {\r\n    return this.inputMode;\r\n  }\r\n\r\n  public get Difficulty(): DIFFICULTY {\r\n    return this.difficulty;\r\n  }\r\n\r\n  private readSettingsFromLocalStorage() {\r\n    let settingsString = window.localStorage[SETTINGS_KEY];\r\n    if (!settingsString) {\r\n      this.saveSettingsToLocalStorage();\r\n    } else {\r\n      const settings = JSON.parse(settingsString);\r\n      Object.keys(settings).forEach(key => {\r\n        switch (key) {\r\n          case 'notesEnabled':\r\n            return (this.notesEnabled = settings[key] === true);\r\n          case 'nightModeEnabled':\r\n            return (this.nightModeEnabled = settings[key] === true);\r\n          case 'progressEnabled':\r\n            return (this.progressEnabled = settings[key] === true);\r\n          case 'markCompletedNumbersEnabled':\r\n            return (this.markCompletedNumbersEnabled = settings[key] === true);\r\n          case 'inputMode':\r\n            return (this.inputMode = +settings[key] as MODE);\r\n          case 'difficulty':\r\n            return (this.difficulty = +settings[key] as DIFFICULTY);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public toggleNotesEnabled(): Settings {\r\n    this.notesEnabled = !this.notesEnabled;\r\n    if (!this.notesEnabled) {\r\n      this.inputMode = MODE.Input;\r\n    }\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public toggleNightModeEnabled(): Settings {\r\n    this.nightModeEnabled = !this.nightModeEnabled;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public toggleProgressEnabled(): Settings {\r\n    this.progressEnabled = !this.progressEnabled;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public toggleMarkCompletedNumbersEnabled(): Settings {\r\n    this.markCompletedNumbersEnabled = !this.markCompletedNumbersEnabled;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public setInputMode(mode: MODE): Settings {\r\n    this.inputMode = mode;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public setDifficulty(difficulty: DIFFICULTY): Settings {\r\n    this.difficulty = difficulty;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  private saveSettingsToLocalStorage(): void {\r\n    window.localStorage.setItem(\r\n      SETTINGS_KEY,\r\n      JSON.stringify({\r\n        notesEnabled: this.notesEnabled,\r\n        nightModeEnabled: this.nightModeEnabled,\r\n        progressEnabled: this.progressEnabled,\r\n        markCompletedNumbersEnabled: this.markCompletedNumbersEnabled,\r\n        inputMode: this.inputMode,\r\n        difficulty: this.difficulty\r\n      })\r\n    );\r\n  }\r\n}\r\n","import 'typeface-roboto';\r\nimport { createStore, combineReducers } from 'redux';\r\n\r\nimport { gameReducer } from './reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(rootReducer);\r\n\r\n  return store;\r\n}\r\n","import React, { Component, CSSProperties } from 'react';\r\nimport Cell from '../models/Cell';\r\nimport { toggleCell } from '../store/actions';\r\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core';\r\nimport { MODE } from '../store/types';\r\n\r\nconst styles = (theme: Theme) => {\r\n  const borderThin = `solid 1px ${theme.palette.primary.dark}`;\r\n  const borderThick = `solid 2px ${theme.palette.primary.dark}`;\r\n\r\n  return createStyles({\r\n    container: {\r\n      display: 'flex',\r\n      position: 'relative',\r\n      width: '11.111111%',\r\n      paddingBottom: '11.111111%',\r\n      textAlign: 'center',\r\n      userSelect: 'none',\r\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif'\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      position: 'absolute',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      borderRight: borderThin,\r\n      borderBottom: borderThin,\r\n      color: theme.palette.type === 'dark' ? theme.palette.grey[400] : theme.palette.primary.dark\r\n    },\r\n    thickBorderTop: {\r\n      borderTop: borderThick\r\n    },\r\n    thickBorderBottom: {\r\n      borderBottom: borderThick\r\n    },\r\n    thickBorderLeft: {\r\n      borderLeft: borderThick\r\n    },\r\n    thickBorderRight: {\r\n      borderRight: borderThick\r\n    },\r\n    dark: {\r\n      backgroundColor:\r\n        theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.grey[200]\r\n    },\r\n    given: {\r\n      fontWeight: 'bold'\r\n    },\r\n    note: {\r\n      position: 'absolute'\r\n    },\r\n    inactiveNote: {\r\n      opacity: 0.1\r\n    },\r\n    activeNote: {\r\n      opacity: 1\r\n    },\r\n    note1: {\r\n      top: 0,\r\n      left: 0,\r\n      bottom: '66.666667%',\r\n      right: '66.666667%'\r\n    },\r\n    note2: {\r\n      top: '0',\r\n      left: '33.333333%',\r\n      bottom: '66.666667%',\r\n      right: '33.333333%'\r\n    },\r\n    note3: {\r\n      top: '0',\r\n      left: '66.666667%',\r\n      bottom: '66.666667%',\r\n      right: '0'\r\n    },\r\n    note4: {\r\n      top: '33.333333%',\r\n      left: '0',\r\n      bottom: '33.333333%',\r\n      right: '66.666667%'\r\n    },\r\n    note5: {\r\n      top: '33.333333%',\r\n      left: '33.333333%',\r\n      bottom: '33.333333%',\r\n      right: '33.333333%'\r\n    },\r\n    note6: {\r\n      top: '33.333333%',\r\n      left: '66.666667%',\r\n      bottom: '33.333333%',\r\n      right: '0'\r\n    },\r\n    note7: {\r\n      top: '66.666667%',\r\n      left: '0',\r\n      bottom: '0',\r\n      right: '66.666667%'\r\n    },\r\n    note8: {\r\n      top: '66.666667%',\r\n      left: '33.333333%',\r\n      bottom: '0',\r\n      right: '33.333333%'\r\n    },\r\n    note9: {\r\n      top: '66.666667%',\r\n      left: '66.666667%',\r\n      bottom: '0',\r\n      right: '0'\r\n    },\r\n    invalid: {\r\n      backgroundColor: theme.palette.error.light,\r\n      color: theme.palette.error.contrastText\r\n    },\r\n    active: {\r\n      backgroundColor:\r\n        theme.palette.type === 'dark' ? theme.palette.primary.dark : theme.palette.primary.light,\r\n      color: theme.palette.primary.contrastText\r\n    }\r\n  });\r\n};\r\n\r\nexport interface ISudokuCellComponentProps extends WithStyles<typeof styles> {\r\n  cell: Cell;\r\n  size: number;\r\n  toggleCell: typeof toggleCell;\r\n  mode: MODE;\r\n}\r\n\r\nclass SudokuCellComponent extends Component<ISudokuCellComponentProps> {\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.container} onClick={() => this.handleClick()}>\r\n        <div className={this.calculateClasses()}>{this.renderContent()}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderContent(): JSX.Element {\r\n    const { classes } = this.props;\r\n    const value = this.props.cell.getValue();\r\n    if (!!value) {\r\n      return <span style={{ fontSize: `${this.props.size}px` }}>{value}</span>;\r\n    }\r\n    const notes = this.props.cell.getNotes();\r\n    const fontSize = `${Math.ceil(this.props.size / 3)}px`;\r\n    const cellClasses = [\r\n      classes.note1,\r\n      classes.note2,\r\n      classes.note3,\r\n      classes.note4,\r\n      classes.note5,\r\n      classes.note6,\r\n      classes.note7,\r\n      classes.note8,\r\n      classes.note9\r\n    ];\r\n    return (\r\n      <React.Fragment>\r\n        {notes.map((x, i) => (\r\n          <span\r\n            className={`${classes.note} ${cellClasses[i]} ${\r\n              x ? classes.activeNote : classes.inactiveNote\r\n            }`}\r\n            key={i}\r\n            style={{ fontSize: fontSize }}>\r\n            {x || this.props.mode === MODE.Note ? i + 1 : ''}\r\n          </span>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private handleClick(): void {\r\n    this.props.toggleCell(this.props.cell.getRow(), this.props.cell.getColumn());\r\n  }\r\n\r\n  private calculateClasses(): string {\r\n    const { classes } = this.props;\r\n    const cell = this.props.cell;\r\n    const row = cell.getRow();\r\n    const column = cell.getColumn();\r\n    const block = cell.getBlock();\r\n\r\n    const result = {\r\n      [classes.content]: true,\r\n      [classes.thickBorderTop]: row === 1,\r\n      [classes.thickBorderBottom]: row % 3 === 0,\r\n      [classes.thickBorderLeft]: column === 1,\r\n      [classes.thickBorderRight]: column % 3 === 0,\r\n      [classes.dark]: block % 2 === 0,\r\n      [classes.given]: cell.isGiven(),\r\n      [classes.invalid]: !cell.isValid(),\r\n      [classes.active]: cell.isActive()\r\n    };\r\n    return Object.keys(result)\r\n      .filter(key => result[key])\r\n      .join(' ');\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SudokuCellComponent);\r\n","import React, { Component } from 'react';\r\nimport Row from '../models/Row';\r\nimport SudokuCell from './SudokuCell';\r\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core';\r\nimport { toggleCell } from '../store/actions';\r\nimport { MODE } from '../store/types';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    sudokuRow: {\r\n      display: 'flex',\r\n      width: '100%'\r\n    }\r\n  });\r\n\r\nexport interface ISudokuRowProps extends WithStyles<typeof styles> {\r\n  row: Row;\r\n  rowSize: number;\r\n  toggleCell: typeof toggleCell;\r\n  mode: MODE;\r\n}\r\n\r\nclass SudokuRowComponent extends Component<ISudokuRowProps> {\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return <div className={classes.sudokuRow}>{this.renderRow()}</div>;\r\n  }\r\n\r\n  private renderRow(): JSX.Element[] | null {\r\n    return this.props.row\r\n      .getCells()\r\n      .map((c, i) => (\r\n        <SudokuCell\r\n          mode={this.props.mode}\r\n          toggleCell={this.props.toggleCell}\r\n          cell={c}\r\n          size={this.getCellSize()}\r\n          key={i}\r\n        />\r\n      ));\r\n  }\r\n\r\n  private getCellSize(): number {\r\n    return this.props.rowSize / 9;\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SudokuRowComponent);\r\n","import React, { Component, CSSProperties } from 'react';\r\nimport Sudoku from '../models/Sudoku';\r\nimport SudokuRow from './SudokuRow';\r\nimport { createNewGame, toggleCell, undo, redo, removeDigit, resetSudoku } from '../store/actions';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport {\r\n  withStyles,\r\n  WithStyles,\r\n  createStyles,\r\n  Theme,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  CardHeader,\r\n  Menu,\r\n  MenuItem\r\n} from '@material-ui/core';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport RedoIcon from '@material-ui/icons/Redo';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { MODE } from '../store/types';\r\nimport MenuIcon from '@material-ui/icons/MoreVert';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    cardContent: {\r\n      padding: 0\r\n    },\r\n    container: {\r\n      position: 'relative',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      '@media (orientation: portrait)': {\r\n        height: `calc(100vw - ${2.5 * theme.spacing.unit}px)`,\r\n        width: `calc(100vw - ${2.5 * theme.spacing.unit}px)`\r\n      },\r\n      '@media (orientation: landscape)': {\r\n        height: 'calc(100vh - 2*64px - 100px)',\r\n        width: 'calc(100vh - 2*64px - 100px)'\r\n      }\r\n    },\r\n    sudoku: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      padding: theme.spacing.unit\r\n    },\r\n    toolbar: {\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      padding: `0 ${theme.spacing.unit}px`\r\n    },\r\n    toolbarButton: {\r\n      padding: theme.spacing.unit\r\n    },\r\n    header: {\r\n      padding: theme.spacing.unit,\r\n      paddingBottom: 0\r\n    },\r\n    headerButton: {\r\n      padding: theme.spacing.unit\r\n    }\r\n  });\r\n\r\nexport interface ISudokuProps extends WithStyles<typeof styles> {\r\n  sudoku: Sudoku;\r\n  settings: Settings;\r\n  createNewGame: typeof createNewGame;\r\n  toggleCell: typeof toggleCell;\r\n  undo: typeof undo;\r\n  redo: typeof redo;\r\n  removeDigit: typeof removeDigit;\r\n  past: Sudoku[];\r\n  future: Sudoku[];\r\n}\r\n\r\nexport interface ISudokuState {\r\n  rowSize: number;\r\n  menuAnchor: any;\r\n}\r\n\r\nclass SudokuComponent extends Component<ISudokuProps, ISudokuState> {\r\n  private containerRef: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: ISudokuProps) {\r\n    super(props);\r\n    this.containerRef = React.createRef();\r\n    this.state = {\r\n      rowSize: 0,\r\n      menuAnchor: null\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardContent className={classes.cardContent}>\r\n            <div className={classes.container} ref={this.containerRef}>\r\n              <div className={classes.sudoku}>{this.renderRows()}</div>\r\n            </div>\r\n          </CardContent>\r\n          <CardActions className={classes.toolbar}>\r\n            <IconButton\r\n              className={classes.toolbarButton}\r\n              color=\"inherit\"\r\n              disabled={!this.props.past.length}\r\n              onClick={() => this.props.undo()}>\r\n              <UndoIcon />\r\n            </IconButton>\r\n            <IconButton className={classes.toolbarButton} onClick={() => this.props.removeDigit()}>\r\n              <ClearIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              className={classes.toolbarButton}\r\n              color=\"inherit\"\r\n              disabled={!this.props.future.length}\r\n              onClick={() => this.props.redo()}>\r\n              <RedoIcon />\r\n            </IconButton>\r\n          </CardActions>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  public componentDidMount(): void {\r\n    this.setCellSize();\r\n  }\r\n\r\n  private setCellSize = () => {\r\n    const rowDOM = this.containerRef.current;\r\n    if (rowDOM) {\r\n      const boundingRectangle = rowDOM.getBoundingClientRect();\r\n      const height = boundingRectangle.height - 100;\r\n      const width = boundingRectangle.width;\r\n      const smallestDimmesion = height < width ? height : width;\r\n      const fittedDimmension = 9 * Math.floor(smallestDimmesion / 9);\r\n      this.setState({\r\n        rowSize: fittedDimmension\r\n      });\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        this.setCellSize();\r\n      });\r\n    }\r\n  };\r\n\r\n  private renderRows(): JSX.Element[] | null {\r\n    if (!this.state.rowSize) {\r\n      return null;\r\n    }\r\n    return this.props.sudoku\r\n      .getRows()\r\n      .map((r, i) => (\r\n        <SudokuRow\r\n          mode={this.props.settings.InputMode}\r\n          row={r}\r\n          key={i}\r\n          rowSize={this.state.rowSize}\r\n          toggleCell={this.props.toggleCell}\r\n        />\r\n      ));\r\n  }\r\n\r\n  private formatMillisecons(milliSeconds: number): string {\r\n    const pad = (num: number) =>\r\n      Math.round(num)\r\n        .toString()\r\n        .padStart(2, '0');\r\n\r\n    const seconds = pad((milliSeconds / 1000) % 60);\r\n    const minutes = pad((milliSeconds / (1000 * 60)) % 60);\r\n    const hours = pad((milliSeconds / (1000 * 60 * 60)) % 24);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SudokuComponent);\r\n","import React from 'react';\r\n\r\nimport { setDigit, removeDigit, setMode, redo, undo } from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport { MODE } from '../store/types';\r\nimport {\r\n  Paper,\r\n  createStyles,\r\n  Theme,\r\n  WithStyles,\r\n  withStyles,\r\n  LinearProgress\r\n} from '@material-ui/core';\r\nimport Chip, { ChipProps } from '@material-ui/core/Chip';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      paddingTop: theme.spacing.unit,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto'\r\n    },\r\n    progress: {\r\n      borderBottomRightRadius: theme.spacing.unit / 2,\r\n      borderBottomLeftRadius: theme.spacing.unit / 2\r\n    },\r\n    errorBar: {\r\n      backgroundColor: theme.palette.error.light\r\n    },\r\n    successBar: {\r\n      backgroundColor: '#66bb6a'\r\n    },\r\n    chip: {\r\n      margin: '4px 2px 4px 2px'\r\n    }\r\n  });\r\n\r\ninterface INumbersProps extends WithStyles<typeof styles> {\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n  setMode: typeof setMode;\r\n  sudoku: Sudoku;\r\n  settings: Settings;\r\n}\r\n\r\ninterface INumbersState {\r\n  longPressTimeout: number | null;\r\n  clickHandledByLongPress: boolean;\r\n}\r\n\r\nclass INumbers extends React.Component<INumbersProps, INumbersState> {\r\n  constructor(props: INumbersProps) {\r\n    super(props);\r\n    this.state = {\r\n      longPressTimeout: null,\r\n      clickHandledByLongPress: false\r\n    };\r\n  }\r\n\r\n  private mouseDownHandler(value: number) {\r\n    const longPressTimeout = window.setTimeout(() => {\r\n      this.props.setDigit(value, this.props.settings.NotesEnabled);\r\n      this.setState({\r\n        clickHandledByLongPress: true\r\n      });\r\n    }, 200);\r\n    this.setState({\r\n      longPressTimeout\r\n    });\r\n  }\r\n\r\n  private mouseUpHandler() {\r\n    if (this.state.longPressTimeout) {\r\n      window.clearTimeout(this.state.longPressTimeout);\r\n    }\r\n  }\r\n\r\n  private getProgress() {\r\n    const cellsLeft = this.props.settings.Difficulty - this.props.sudoku.countEmptyCells();\r\n    const completionRatio = cellsLeft / this.props.settings.Difficulty;\r\n    return completionRatio * 100;\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    const isNoteMode = this.props.settings.InputMode === MODE.Note;\r\n    const sudoku = this.props.sudoku;\r\n    const isSolved = sudoku.isSolved();\r\n    const showRedProgressBar = sudoku.countEmptyCells() === 0 && !isSolved;\r\n    return (\r\n      <div className={classes.container}>\r\n        <Paper>\r\n          {[...Array(10).keys()].slice(1).map(x => {\r\n            let color: ChipProps['color'] = 'primary';\r\n            if (\r\n              this.props.sudoku.isDigitCompleted(x) &&\r\n              this.props.settings.MarkCompletedNumbersEnabled\r\n            ) {\r\n              color = 'default';\r\n            }\r\n            return (\r\n              <Chip\r\n                onMouseDown={() => this.mouseDownHandler(x)}\r\n                onTouchStart={() => this.mouseDownHandler(x)}\r\n                onMouseUp={() => this.mouseUpHandler()}\r\n                onTouchEnd={() => this.mouseUpHandler()}\r\n                onClick={() => {\r\n                  if (!this.state.clickHandledByLongPress) {\r\n                    this.props.setDigit(x);\r\n                  }\r\n                  this.setState({\r\n                    clickHandledByLongPress: false\r\n                  });\r\n                }}\r\n                color={color}\r\n                className={classes.chip}\r\n                label={x}\r\n                key={x}\r\n              />\r\n            );\r\n          })}\r\n          {!this.props.settings.ProgressEnabled ? null : (\r\n            <LinearProgress\r\n              className={classes.progress}\r\n              classes={{\r\n                bar: showRedProgressBar ? classes.errorBar : ''\r\n              }}\r\n              variant=\"determinate\"\r\n              value={this.getProgress()}\r\n            />\r\n          )}\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(INumbers);\r\n","import {\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  REMOVE_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  DIRECTION,\r\n  TOGGLE_NOTE_MODE,\r\n  REDO,\r\n  UNDO,\r\n  MODE,\r\n  TOGGLE_NIGHT_MODE,\r\n  RESET_SUDOKU,\r\n  FILL_CANDIDATES,\r\n  CLEAR_CANDIDATES,\r\n  TOGGLE_SETTING_USE_NOTES as TOGGLE_SETTING_NOTES_ENABLED,\r\n  TOGGLE_SETTING_MARK_COMPLETED,\r\n  TOGGLE_SETTING_PROGRESS,\r\n  TOGGLE_EXIT_PROMPT\r\n} from './types';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\n\r\nexport function changeDifficulty(difficulty: DIFFICULTY): OptionActions {\r\n  return {\r\n    type: CHANGE_DIFFICULTY,\r\n    payload: difficulty\r\n  };\r\n}\r\n\r\nexport function createNewGame(): OptionActions {\r\n  return {\r\n    type: NEW_GAME\r\n  };\r\n}\r\n\r\nexport function validateSolution(): OptionActions {\r\n  return {\r\n    type: VALIDATE_SOLUTION\r\n  };\r\n}\r\n\r\nexport function toggleCell(row: number, column: number): OptionActions {\r\n  return {\r\n    type: TOGGLE_CELL,\r\n    payload: {\r\n      row,\r\n      column\r\n    }\r\n  };\r\n}\r\n\r\nexport function setDigit(digit: number, force: boolean = false): OptionActions {\r\n  return {\r\n    type: SET_DIGIT,\r\n    payload: {\r\n      digit,\r\n      force\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeDigit(): OptionActions {\r\n  return {\r\n    type: REMOVE_DIGIT\r\n  };\r\n}\r\n\r\nexport function navigateCells(direction: DIRECTION): OptionActions {\r\n  return {\r\n    type: NAVIGATE_CELLS,\r\n    payload: {\r\n      direction\r\n    }\r\n  };\r\n}\r\n\r\nexport function setMode(mode: MODE): OptionActions {\r\n  return {\r\n    type: TOGGLE_NOTE_MODE,\r\n    payload: {\r\n      mode\r\n    }\r\n  };\r\n}\r\n\r\nexport function undo(): OptionActions {\r\n  return {\r\n    type: UNDO\r\n  };\r\n}\r\n\r\nexport function redo(): OptionActions {\r\n  return {\r\n    type: REDO\r\n  };\r\n}\r\n\r\nexport function toggleNightMode(): OptionActions {\r\n  return {\r\n    type: TOGGLE_NIGHT_MODE\r\n  };\r\n}\r\n\r\nexport function resetSudoku(): OptionActions {\r\n  return {\r\n    type: RESET_SUDOKU\r\n  };\r\n}\r\n\r\nexport function fillCandidates(): OptionActions {\r\n  return {\r\n    type: FILL_CANDIDATES\r\n  };\r\n}\r\n\r\nexport function clearCandidates(): OptionActions {\r\n  return {\r\n    type: CLEAR_CANDIDATES\r\n  };\r\n}\r\n\r\nexport function toggleNotesEnabled(): OptionActions {\r\n  return {\r\n    type: TOGGLE_SETTING_NOTES_ENABLED\r\n  };\r\n}\r\n\r\nexport function toggleMarkCompleted(): OptionActions {\r\n  return {\r\n    type: TOGGLE_SETTING_MARK_COMPLETED\r\n  };\r\n}\r\n\r\nexport function toggleProgress(): OptionActions {\r\n  return {\r\n    type: TOGGLE_SETTING_PROGRESS\r\n  };\r\n}\r\n\r\nexport function toggleExitPrompt(): OptionActions {\r\n  return {\r\n    type: TOGGLE_EXIT_PROMPT\r\n  };\r\n}\r\n","let resolvePromise = () => {};\r\nconst updateExistsPromise = new Promise((resolve, reject) => {\r\n  resolvePromise = resolve;\r\n});\r\n\r\nexport const registerUpdate = resolvePromise;\r\nexport default updateExistsPromise;\r\n","import React, { Component } from 'react';\r\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport {\r\n  changeDifficulty,\r\n  validateSolution,\r\n  createNewGame,\r\n  toggleNightMode,\r\n  resetSudoku,\r\n  fillCandidates,\r\n  clearCandidates,\r\n  setMode,\r\n  toggleNotesEnabled,\r\n  toggleMarkCompleted,\r\n  toggleProgress\r\n} from '../store/actions';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CollapseIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandIcon from '@material-ui/icons/ExpandMore';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport NewIcon from '@material-ui/icons/Casino';\r\nimport ResetIcon from '@material-ui/icons/Replay';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FeatureIcon from '@material-ui/icons/Settings';\r\nimport DifficultyIcon from '@material-ui/icons/FitnessCenter';\r\nimport UpdateIcon from '@material-ui/icons/SyncProblem';\r\nimport { MODE } from '../store/types';\r\nimport ServiceWorkerUpdated from '../utils/ServiceWorkerUpdated';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1\r\n    },\r\n    modeFab: {\r\n      position: 'fixed',\r\n      zIndex: 1,\r\n      bottom: 2 * theme.spacing.unit,\r\n      right: 2 * theme.spacing.unit\r\n    },\r\n    menuButton: {\r\n      marginLeft: -12,\r\n      marginRight: 20\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      paddingTop: theme.spacing.unit / 2,\r\n      paddingBottom: theme.spacing.unit / 2,\r\n      paddingLeft: theme.spacing.unit,\r\n      paddingRight: theme.spacing.unit,\r\n      color:\r\n        theme.palette.type === 'dark'\r\n          ? theme.palette.primary.contrastText\r\n          : theme.palette.secondary.main\r\n    },\r\n    drawerList: {\r\n      paddingTop: 0\r\n    },\r\n    drawerPaper: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        minWidth: '70%'\r\n      },\r\n      [theme.breakpoints.up('sm')]: {\r\n        minWidth: '40%'\r\n      },\r\n      [theme.breakpoints.up('lg')]: {\r\n        minWidth: '30%'\r\n      }\r\n    },\r\n    listHeader: {\r\n      backgroundColor: theme.palette.background.default,\r\n      textTransform: 'uppercase'\r\n    },\r\n    notesToggle: {\r\n      color: theme.palette.common.white\r\n    },\r\n    subMenuButton: {\r\n      color:\r\n        theme.palette.type === 'dark' ? theme.palette.primary.contrastText : theme.palette.grey[600]\r\n    },\r\n    feature: {\r\n      paddingTop: 0,\r\n      paddingBottom: 0\r\n    }\r\n  });\r\n\r\nexport interface ITopBarProps extends WithStyles<typeof styles> {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  validateSolution: typeof validateSolution;\r\n  createNewGame: typeof createNewGame;\r\n  toggleNightMode: typeof toggleNightMode;\r\n  resetSudoku: typeof resetSudoku;\r\n  fillCandidates: typeof fillCandidates;\r\n  clearCandidates: typeof clearCandidates;\r\n  setMode: typeof setMode;\r\n  settings: Settings;\r\n  toggleNotesEnabled: typeof toggleNotesEnabled;\r\n  toggleMarkCompleted: typeof toggleMarkCompleted;\r\n  toggleProgress: typeof toggleProgress;\r\n}\r\nexport interface ITopBarState {\r\n  drawerOpen: boolean;\r\n  difficultyOpen: boolean;\r\n  helpOpen: boolean;\r\n  featuresOpen: boolean;\r\n  hasUpdates: boolean;\r\n}\r\n\r\nconst DIFFICUTIES = [\r\n  {\r\n    difficulty: DIFFICULTY.VeryEasy,\r\n    label: 'Very Easy'\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.Easy,\r\n    label: 'Easy'\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.Normal,\r\n    label: 'Medium'\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.Hard,\r\n    label: 'Hard'\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.VeryHard,\r\n    label: 'Very Hard'\r\n  }\r\n];\r\n\r\nclass TopBar extends Component<ITopBarProps, ITopBarState> {\r\n  constructor(props: ITopBarProps) {\r\n    super(props);\r\n    this.state = {\r\n      drawerOpen: false,\r\n      difficultyOpen: false,\r\n      helpOpen: false,\r\n      hasUpdates: false,\r\n      featuresOpen: false\r\n    };\r\n\r\n    ServiceWorkerUpdated.then(() => {\r\n      this.setState({\r\n        hasUpdates: true\r\n      });\r\n    });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const isNoteMode = this.props.settings.InputMode === MODE.Note;\r\n    const toggleMode = () => {\r\n      if (isNoteMode) {\r\n        this.props.setMode(MODE.Input);\r\n      } else {\r\n        this.props.setMode(MODE.Note);\r\n      }\r\n    };\r\n\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              onClick={() => this.openDrawer()}>\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n              {this.getBarText()}\r\n            </Typography>\r\n            <FormControlLabel\r\n              classes={{ label: classes.notesToggle }}\r\n              label=\"Night mode\"\r\n              labelPlacement=\"start\"\r\n              onClick={() => this.props.toggleNightMode()}\r\n              control={<Switch checked={this.props.settings.NightModeEnabled} />}\r\n            />\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"temporary\"\r\n          classes={{ paper: classes.drawerPaper }}\r\n          open={this.state.drawerOpen}\r\n          onClose={() => this.closeDrawer()}>\r\n          <div className={classes.drawerHeader}>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n              Options\r\n            </Typography>\r\n            <IconButton onClick={() => this.closeDrawer()}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </div>\r\n          <List className={classes.drawerList}>\r\n            <ListSubheader className={classes.listHeader}>Puzzle</ListSubheader>\r\n            <ListItem button onClick={() => this.createNewGame()}>\r\n              <ListItemIcon>\r\n                <NewIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"New puzzle\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => this.reset()}>\r\n              <ListItemIcon>\r\n                <ResetIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Reset puzzle\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => this.toggleHelp()}>\r\n              <ListItemIcon>\r\n                <HelpIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Help\" />\r\n              {this.state.helpOpen ? (\r\n                <CollapseIcon className={classes.subMenuButton} />\r\n              ) : (\r\n                <ExpandIcon className={classes.subMenuButton} />\r\n              )}\r\n            </ListItem>\r\n            <Collapse in={this.state.helpOpen} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>\r\n                <ListItem button onClick={() => this.validate()}>\r\n                  <ListItemText primary=\"Validate\" />\r\n                </ListItem>\r\n                <ListItem button onClick={() => this.fillCandidates()}>\r\n                  <ListItemText primary=\"Add notes\" />\r\n                </ListItem>\r\n                <ListItem button onClick={() => this.clearCandidates()}>\r\n                  <ListItemText primary=\"Clear notes\" />\r\n                </ListItem>\r\n              </List>\r\n            </Collapse>\r\n            <ListItem button onClick={() => this.toggleDifficulty()}>\r\n              <ListItemIcon>\r\n                <DifficultyIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Difficulty\" />\r\n              {this.state.difficultyOpen ? (\r\n                <CollapseIcon className={classes.subMenuButton} />\r\n              ) : (\r\n                <ExpandIcon className={classes.subMenuButton} />\r\n              )}\r\n            </ListItem>\r\n            <Collapse in={this.state.difficultyOpen} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>{this.renderDifficulties()}</List>\r\n            </Collapse>\r\n            <ListSubheader className={classes.listHeader}>Settings</ListSubheader>\r\n            <ListItem button onClick={() => this.toggleFeatures()}>\r\n              <ListItemIcon>\r\n                <FeatureIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Features\" />\r\n              {this.state.featuresOpen ? (\r\n                <CollapseIcon className={classes.subMenuButton} />\r\n              ) : (\r\n                <ExpandIcon className={classes.subMenuButton} />\r\n              )}\r\n            </ListItem>\r\n            <Collapse in={this.state.featuresOpen} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>\r\n                <ListItem\r\n                  button\r\n                  className={classes.feature}\r\n                  onClick={() => this.props.toggleNotesEnabled()}>\r\n                  <ListItemText primary=\"Use notes\" />\r\n                  <Switch checked={this.props.settings.NotesEnabled} />\r\n                </ListItem>\r\n                <ListItem\r\n                  button\r\n                  className={classes.feature}\r\n                  onClick={() => this.props.toggleMarkCompleted()}>\r\n                  <ListItemText primary=\"Mark completed numbers\" />\r\n                  <Switch checked={this.props.settings.MarkCompletedNumbersEnabled} />\r\n                </ListItem>\r\n                <ListItem\r\n                  button\r\n                  className={classes.feature}\r\n                  onClick={() => this.props.toggleProgress()}>\r\n                  <ListItemText primary=\"Show progress\" />\r\n                  <Switch checked={this.props.settings.ProgressEnabled} />\r\n                </ListItem>\r\n              </List>\r\n            </Collapse>\r\n            <ListItem disabled={!this.state.hasUpdates} button onClick={() => this.forceRefresh()}>\r\n              <ListItemIcon>\r\n                <UpdateIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Update App\" />\r\n            </ListItem>\r\n          </List>\r\n        </Drawer>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private openDrawer(): void {\r\n    this.setState({\r\n      drawerOpen: true\r\n    });\r\n  }\r\n\r\n  private closeDrawer(): void {\r\n    this.setState({\r\n      drawerOpen: false\r\n    });\r\n  }\r\n\r\n  private renderDifficulties(): JSX.Element[] {\r\n    return DIFFICUTIES.map(option => (\r\n      <ListItem\r\n        button\r\n        key={option.difficulty}\r\n        selected={this.props.settings.Difficulty === option.difficulty}\r\n        onClick={() => this.setDifficulty(option.difficulty)}>\r\n        <ListItemText primary={option.label} />\r\n      </ListItem>\r\n    ));\r\n  }\r\n\r\n  private setDifficulty(difficulty: DIFFICULTY): void {\r\n    this.closeDrawer();\r\n    this.props.changeDifficulty(difficulty);\r\n  }\r\n\r\n  private validate(): void {\r\n    this.closeDrawer();\r\n    this.props.validateSolution();\r\n  }\r\n\r\n  private getBarText(): string {\r\n    const difficulty = DIFFICUTIES.find(\r\n      option => option.difficulty === this.props.settings.Difficulty\r\n    );\r\n    if (difficulty) {\r\n      return `${difficulty.label}`;\r\n    }\r\n    return '';\r\n  }\r\n  private createNewGame(): void {\r\n    this.closeDrawer();\r\n    this.props.createNewGame();\r\n  }\r\n\r\n  private reset(): void {\r\n    this.closeDrawer();\r\n    this.props.resetSudoku();\r\n  }\r\n\r\n  private fillCandidates(): void {\r\n    this.closeDrawer();\r\n    this.props.fillCandidates();\r\n  }\r\n\r\n  private clearCandidates(): void {\r\n    this.closeDrawer();\r\n    this.props.clearCandidates();\r\n  }\r\n\r\n  private async forceRefresh() {\r\n    let serviceWorker = await navigator.serviceWorker.getRegistration();\r\n    if (serviceWorker) {\r\n      await serviceWorker.unregister();\r\n    }\r\n    localStorage.clear();\r\n    window.location.reload(true);\r\n  }\r\n\r\n  private toggleDifficulty(): void {\r\n    this.setState({\r\n      featuresOpen: false,\r\n      helpOpen: false,\r\n      difficultyOpen: !this.state.difficultyOpen\r\n    });\r\n  }\r\n\r\n  private toggleHelp(): void {\r\n    this.setState({\r\n      featuresOpen: false,\r\n      difficultyOpen: false,\r\n      helpOpen: !this.state.helpOpen\r\n    });\r\n  }\r\n\r\n  private toggleFeatures(): void {\r\n    this.setState({\r\n      featuresOpen: !this.state.featuresOpen,\r\n      difficultyOpen: false,\r\n      helpOpen: false\r\n    });\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(TopBar);\r\n","import React from 'react';\r\nimport {\r\n  withStyles,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  DialogActions,\r\n  Button,\r\n  createStyles,\r\n  Theme,\r\n  WithTheme,\r\n  WithStyles,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { createNewGame } from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) => createStyles({});\r\n\r\nexport interface ICompletedDialogProps extends WithStyles<typeof styles> {\r\n  createNewGame: typeof createNewGame;\r\n  sudoku: Sudoku;\r\n  settings: Settings;\r\n}\r\n\r\nconst CompletedDialog: React.FunctionComponent<ICompletedDialogProps> = (\r\n  props: ICompletedDialogProps\r\n) => {\r\n  const formatMillisecons = (milliSeconds: number) => {\r\n    const pad = (num: number) =>\r\n      Math.round(num)\r\n        .toString()\r\n        .padStart(2, '0');\r\n\r\n    const seconds = pad((milliSeconds / 1000) % 60);\r\n    const minutes = pad((milliSeconds / (1000 * 60)) % 60);\r\n    const hours = pad((milliSeconds / (1000 * 60 * 60)) % 24);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  };\r\n\r\n  const difficultyText = () => {\r\n    switch (props.settings.Difficulty) {\r\n      case DIFFICULTY.VeryEasy:\r\n        return 'a very easy';\r\n      case DIFFICULTY.Easy:\r\n        return 'an easy';\r\n      case DIFFICULTY.Normal:\r\n        return 'a medium';\r\n      case DIFFICULTY.Hard:\r\n        return 'a hard';\r\n      case DIFFICULTY.VeryHard:\r\n        return 'a very hard';\r\n      default:\r\n        return 'an unknown';\r\n    }\r\n  };\r\n\r\n  const ellapsedTime = formatMillisecons(Date.now() - props.sudoku.getCreationTimestamp());\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      maxWidth=\"xl\"\r\n      open={props.sudoku.isSolved()}\r\n      fullWidth={true}>\r\n      <DialogTitle id=\"confirmation-dialog-title\">Done!</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          You completed {difficultyText()} puzzle.\r\n        </Typography>\r\n        <Typography variant=\"body1\">Elapsed time: {ellapsedTime}</Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={() => {\r\n            props.createNewGame();\r\n          }}>\r\n          New Game\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(CompletedDialog);\r\n","import React from 'react';\r\nimport {\r\n  withStyles,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  createStyles,\r\n  WithStyles,\r\n  Typography\r\n} from '@material-ui/core';\r\n\r\nconst styles = () => createStyles({});\r\n\r\nexport interface IExitPromptProps extends WithStyles<typeof styles> {\r\n  open: boolean;\r\n  toggle: () => void;\r\n}\r\n\r\nconst ExitPrompt: React.FunctionComponent<IExitPromptProps> = (props: IExitPromptProps) => {\r\n  return (\r\n    <Dialog maxWidth=\"xl\" open={props.open} fullWidth={true}>\r\n      <DialogTitle id=\"confirmation-dialog-title\">Quit?</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"body1\">\r\n          If you exit the application the current puzzle will be discarded. To quit the application\r\n          press the back button again.\r\n        </Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={() => {\r\n            window.history.pushState({}, '');\r\n            props.toggle();\r\n          }}>\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ExitPrompt);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport '../layout/App.scss';\r\nimport SudokuComponent from './Sudoku';\r\nimport Numbers from './Numbers';\r\nimport { AppState } from '../store';\r\nimport {\r\n  changeDifficulty,\r\n  createNewGame,\r\n  validateSolution,\r\n  toggleCell,\r\n  setDigit,\r\n  removeDigit,\r\n  navigateCells,\r\n  setMode,\r\n  redo,\r\n  undo,\r\n  toggleNightMode,\r\n  resetSudoku,\r\n  fillCandidates,\r\n  clearCandidates,\r\n  toggleNotesEnabled,\r\n  toggleMarkCompleted,\r\n  toggleProgress,\r\n  toggleExitPrompt\r\n} from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport { DIRECTION } from '../store/types';\r\nimport TopBar from './TopBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport CompletedDialog from './CompletedDialog';\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\r\nimport theme from '../theme';\r\nimport Settings from '../models/Settings';\r\nimport ExitPrompt from './ExitPrompt';\r\n\r\ninterface IAppProps {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  createNewGame: typeof createNewGame;\r\n  validateSolution: typeof validateSolution;\r\n  toggleCell: typeof toggleCell;\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n  navigateCells: typeof navigateCells;\r\n  setMode: typeof setMode;\r\n  undo: typeof undo;\r\n  redo: typeof redo;\r\n  sudoku: Sudoku;\r\n  past: Sudoku[];\r\n  future: Sudoku[];\r\n  toggleNightMode: typeof toggleNightMode;\r\n  resetSudoku: typeof resetSudoku;\r\n  fillCandidates: typeof fillCandidates;\r\n  clearCandidates: typeof clearCandidates;\r\n  settings: Settings;\r\n  toggleNotesEnabled: typeof toggleNotesEnabled;\r\n  toggleMarkCompleted: typeof toggleMarkCompleted;\r\n  toggleProgress: typeof toggleProgress;\r\n  showExitPrompt: boolean;\r\n  toggleExitPrompt: typeof toggleExitPrompt;\r\n}\r\n\r\nclass App extends Component<IAppProps> {\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const t = theme(this.props.settings.NightModeEnabled);\r\n    return (\r\n      <div className=\"App\">\r\n        <MuiThemeProvider theme={t}>\r\n          <CssBaseline />\r\n          <TopBar {...this.props} />\r\n          <div className=\"App-content\">\r\n            <SudokuComponent {...this.props} />\r\n            <Numbers {...this.props} />\r\n          </div>\r\n          <CompletedDialog {...this.props} />\r\n          <ExitPrompt open={this.props.showExitPrompt} toggle={this.props.toggleExitPrompt} />\r\n        </MuiThemeProvider>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    document.addEventListener('keydown', this.handleKeyboard);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    document.removeEventListener('keydown', this.handleKeyboard);\r\n  }\r\n\r\n  private handleKeyboard = (e: KeyboardEvent) => {\r\n    const key = e.which;\r\n    if (key >= 49 && key <= 57) {\r\n      // [1...9]\r\n      this.props.setDigit(key - 48);\r\n    } else if (key === 8 || key === 2) {\r\n      // backspace || delete\r\n      this.props.removeDigit();\r\n    } else if (key === 37) {\r\n      //left\r\n      this.props.navigateCells(DIRECTION.Left);\r\n    } else if (key === 38) {\r\n      //up\r\n      this.props.navigateCells(DIRECTION.Up);\r\n    } else if (key === 39) {\r\n      // right\r\n      this.props.navigateCells(DIRECTION.Right);\r\n    } else if (key === 40) {\r\n      // down\r\n      this.props.navigateCells(DIRECTION.Down);\r\n    }\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  sudoku: state.game.sudoku.current,\r\n  past: state.game.sudoku.past,\r\n  future: state.game.sudoku.future,\r\n  settings: state.game.settings,\r\n  showExitPrompt: state.game.showExitPrompt\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    changeDifficulty,\r\n    createNewGame,\r\n    validateSolution,\r\n    toggleCell,\r\n    setDigit,\r\n    removeDigit,\r\n    navigateCells,\r\n    setMode,\r\n    undo,\r\n    redo,\r\n    toggleNightMode,\r\n    resetSudoku,\r\n    fillCandidates,\r\n    clearCandidates,\r\n    toggleNotesEnabled,\r\n    toggleMarkCompleted,\r\n    toggleProgress,\r\n    toggleExitPrompt\r\n  }\r\n)(App);\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport default (nightMode: boolean) => {\r\n  return createMuiTheme({\r\n    typography: {\r\n      useNextVariants: true\r\n    },\r\n    palette: {\r\n      type: nightMode ? 'dark' : 'light',\r\n      primary: {\r\n        main: '#424242'\r\n      },\r\n      secondary: {\r\n        main: '#616161'\r\n      }\r\n    }\r\n  });\r\n};\r\n","import './layout/index.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport configureStore from './store';\r\nimport App from './presentation/App';\r\nimport pregenerate from './utils/pregenerate';\r\nimport { registerUpdate } from './utils/ServiceWorkerUpdated';\r\nimport { toggleExitPrompt } from './store/actions';\r\n\r\nconst store = configureStore();\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\nserviceWorker.register();\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  (window as any).pregenerate = pregenerate;\r\n}\r\n\r\nserviceWorker.register({\r\n  onUpdate: () => {\r\n    registerUpdate();\r\n  }\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  window.history.pushState({}, '');\r\n});\r\n\r\nwindow.addEventListener('popstate', e => {\r\n  store.dispatch(toggleExitPrompt());\r\n});\r\n"],"sourceRoot":""}