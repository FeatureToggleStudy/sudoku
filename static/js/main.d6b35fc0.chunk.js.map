{"version":3,"sources":["serviceWorker.ts","store/types.ts","models/Difficulty.ts","models/Cell.ts","models/Row.ts","models/Sudoku.ts","store/reducers.ts","store/index.ts","presentation/SudokuCell.tsx","presentation/SudokuRow.tsx","presentation/Sudoku.tsx","presentation/DifficultySelector.tsx","presentation/Options.tsx","presentation/Input.tsx","presentation/App.tsx","store/actions.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DIRECTION","DIFFICULTY","CHANGE_DIFFICULTY","NEW_GAME","VALIDATE_SOLUTION","TOGGLE_CELL","SET_DIGIT","REMOVE_DIGIT","NAVIGATE_CELLS","Cell","previous","Object","classCallCheck","this","value","valid","solution","row","column","given","active","calculateBlock","modifier","cell","digit","Row","cells","index","map","c","validate","setActive","isActive","getColumn","setDigit","removeDigit","data","toConsumableArray","_ref","i","_ref2","slicedToArray","create","BASE","Sudoku","difficulty","rows","activeCell","Easy","moveRowOrColumn","removeValues","d","cellsToRemove","x","Math","floor","random","y","_this$data$x$y","_this$getFromAndTo","getFromAndTo","_this$getFromAndTo2","from","to","round","moveColumn","moveRow","arguments","length","undefined","block","temp","forEach","sudoku","r","toggleCell","allNumbers","reduce","acc","next","concat","getCells","getValue","solved","_loop","filter","n","push","dirrection","increment","val","decrement","Up","Down","Right","Left","activateCell","every","isSolved","generateSudoku","initialState","rootReducer","combineReducers","game","action","type","payload","objectSpread","navigate","direction","SudokuCellComponent","_this","react_default","a","createElement","className","calculateClasses","style","calculateStyles","ref","onClick","handleClick","props","getRow","size","height","width","fontSize","classes","even-block-cell","getBlock","given-cell","isGiven","invalid-cell","isValid","active-cell","Array","keys","key","join","Component","SudokuRowComponent","getRowStyle","renderRow","rowSize","getCellSize","SudokuCell_SudokuCellComponent","assign","SudokuComponent","possibleConstructorReturn","getPrototypeOf","call","containerRef","startTime","setCellSize","rowDOM","current","boundingRectangle","getBoundingClientRect","rawDimmension","dimmension","setState","requestAnimationFrame","React","createRef","Date","now","renderRows","renderSolvedOverlay","addEventListener","removeEventListener","_this2","getRows","SudokuRow_SudokuRowComponent","ellapsedTime","marginLeft","formatMillisecons","milliSeconds","pad","num","toString","padStart","seconds","minutes","hours","options","label","VeryEasy","Normal","Hard","VeryHard","Insane","DifficultySelectorComponent","onChange","e","target","changeDifficulty","OptionsComponent","createNewGame","validateSolution","DifficultySelector","InputComponent","slice","App","handleKeyboard","which","navigateCells","presentation_Options","Sudoku_SudokuComponent","presentation_Input","document","connect","store","createStore","ReactDOM","render","es","presentation_App","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0UAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,SChGrDC,mHAOL,ICdKC,EDcCC,EAAoB,oBACpBC,EAAW,WACXC,EAAoB,oBACpBC,EAAc,eACdC,EAAY,YACZC,EAAe,eACfC,EAAiB,8CErBTC,aASnB,SAAAA,EAAoBC,GAAkBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAI,KAR9BC,WAQ6B,EAAAD,KAP7BE,WAO6B,EAAAF,KAN7BG,cAM6B,EAAAH,KAL7BI,SAK6B,EAAAJ,KAJ7BK,YAI6B,EAAAL,KAH7BM,WAG6B,EAAAN,KAF7BO,YAE6B,EACnCP,KAAKC,MAAQJ,EAAWA,EAASI,MAAQ,KACzCD,KAAKG,SAAWN,EAAWA,EAASM,UAAY,EAChDH,KAAKI,IAAMP,EAAWA,EAASO,KAAO,EACtCJ,KAAKK,OAASR,EAAWA,EAASQ,QAAU,EAC5CL,KAAKM,QAAQT,GAAWA,EAASS,MACjCN,KAAKO,SAASV,GAAWA,EAASU,OAClCP,KAAKE,OAAQL,GAAWA,EAASK,gEAejC,OAAOF,KAAKG,4CAIZ,OAAOH,KAAKC,uCAIZ,OAAOD,KAAKI,wCAIZ,OAAOJ,KAAKK,0CAIZ,OAAOL,KAAKO,0CAIZ,OAAIP,KAAKI,KAAO,EACPJ,KAAKQ,eAAe,GAClBR,KAAKI,KAAO,GAAKJ,KAAKI,KAAO,EAC/BJ,KAAKQ,eAAe,GAEpBR,KAAKQ,eAAe,0CAIRC,GACrB,OAAIT,KAAKK,QAAU,EACVI,EAAW,EACTT,KAAKK,QAAU,GAAKL,KAAKK,QAAU,EACrCI,EAAW,EAEXA,EAAW,oCAKpB,OAAOT,KAAKM,yCAIZ,IAAMI,EAAO,IAAId,EAAKI,MAEtB,OADAU,EAAKR,MAAuB,OAAfF,KAAKC,OAAkBD,KAAKC,QAAUD,KAAKG,SACjDO,oCAIP,OAAOV,KAAKE,wCAGGK,GACf,IAAMG,EAAO,IAAId,EAAKI,MAEtB,OADAU,EAAKH,OAASA,EACPG,mCAGOC,GACd,OAAKX,KAAKO,QAAUP,KAAKM,MAChBN,MAETA,KAAKC,MAAQU,EACbX,KAAKE,OAAQ,EACN,IAAIN,EAAKI,6CAIhB,OAAKA,KAAKO,QAGVP,KAAKC,MAAQ,KACbD,KAAKE,OAAQ,EACN,IAAIN,EAAKI,OAJPA,wCAQT,OAAOA,KAAKC,QAAUD,KAAKG,0CA1FfA,EAAkBC,EAAaC,EAAgBC,GAC3D,IAAMI,EAAO,IAAId,EAOjB,OANAc,EAAKP,SAAWA,EAChBO,EAAKN,IAAMA,EACXM,EAAKL,OAASA,EACdK,EAAKJ,MAAQA,EACbI,EAAKT,MAAQK,EAAQH,EAAW,KAChCO,EAAKR,OAAQ,EACNQ,WCxBUE,aAKnB,SAAAA,EAAoBf,GAAiBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,GAAAZ,KAJ7Ba,WAI4B,EAAAb,KAH5Bc,WAG4B,EAAAd,KAF5BO,YAE4B,EAClCP,KAAKc,MAAQjB,EAAWA,EAASiB,OAAS,EAC1Cd,KAAKO,SAASV,GAAWA,EAASU,OAClCP,KAAKa,MAAQhB,EAAWA,EAASgB,MAAQ,0DAWzC,OAAOb,KAAKa,yCAIZ,IAAMT,EAAM,IAAIQ,EAAIZ,MAEpB,OADAI,EAAIS,MAAQb,KAAKa,MAAME,IAAI,SAAAC,GAAC,OAAIA,EAAEC,aAC3Bb,qCAIP,OAAOJ,KAAKc,yCAGIA,EAAeT,GAC/B,GAAIL,KAAKc,QAAUA,IAAUd,KAAKO,OAChC,OAAOP,KAET,IAAMI,EAAM,IAAIQ,EAAIZ,MAepB,OAbIA,KAAKO,OACHP,KAAKc,QAAUA,EACjBV,EAAIS,MAAQb,KAAKa,MAAME,IAAI,SAAAC,GACzB,OAAOA,EAAEE,WAAUF,EAAEG,YAAqBH,EAAEI,cAAgBf,MAG9DD,EAAIG,QAAS,EACbH,EAAIS,MAAQb,KAAKa,MAAME,IAAI,SAAAC,GAAC,OAAIA,EAAEG,WAAaH,EAAEE,WAAU,GAASF,KAE7DhB,KAAKc,QAAUA,IACxBV,EAAIG,QAAS,EACbH,EAAIS,MAAQb,KAAKa,MAAME,IAAI,SAAAC,GAAC,OAAIA,EAAEI,cAAgBf,EAASW,EAAEE,WAAU,GAAQF,KAE1EZ,qCAIP,OAAOJ,KAAKO,wCAGEI,GACd,OAAKX,KAAKO,QAGVP,KAAKa,MAAQb,KAAKa,MAAME,IAAI,SAAAC,GAAC,OAAIA,EAAEK,SAASV,KACrC,IAAIC,EAAIZ,OAHNA,2CAOT,OAAKA,KAAKO,QAGVP,KAAKa,MAAQb,KAAKa,MAAME,IAAI,SAAAC,GAAC,OAAIA,EAAEM,gBAC5B,IAAIV,EAAIZ,OAHNA,sCAzDGuB,EAA2BT,GACvC,IAAMV,EAAM,IAAIQ,EAGhB,OAFAR,EAAIS,MAAJf,OAAA0B,EAAA,EAAA1B,CAAgByB,EAAKR,IAAI,SAAAU,EAAiBC,GAAjB,IAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GAAExB,EAAF0B,EAAA,GAASrB,EAATqB,EAAA,UAAuB/B,EAAKiC,OAAO5B,EAAOa,EAAOY,EAAI,EAAGpB,MACjFF,EAAIU,MAAQA,EACLV,qBFjBChB,+JGGZ,IAAM0C,EAAO,CACX,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGNC,aAMnB,SAAAA,EAAoBlC,GAAoBC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GAAA/B,KALhCgC,gBAK+B,EAAAhC,KAJ/BuB,UAI+B,EAAAvB,KAH/BiC,UAG+B,EAAAjC,KAF/BkC,gBAE+B,EACrClC,KAAKgC,WAAanC,EAAWA,EAASmC,WAAa5C,EAAW+C,KAC9DnC,KAAKuB,KAAO1B,EAAWA,EAAS0B,KAAO,GACvCvB,KAAKiC,KAAOpC,EAAWA,EAASoC,KAAO,GACvCjC,KAAKkC,WAAarC,EAAWA,EAASqC,WAAa,CAAE9B,KAAM,EAAGC,QAAS,yDAYvE,OAAOL,KAAKiC,8CAIZ,IAAK,IAAIP,EAAI,EAAGA,EAAI,IAAMA,IACxB1B,KAAKoC,kBAEPpC,KAAKqC,eACLrC,KAAKiC,KAAOjC,KAAKuB,KAAKR,IAAI,SAACuB,EAAGZ,GAAJ,OAAUd,EAAIiB,OAAOS,EAAGZ,EAAI,4CAKtD,IADA,IAAIa,EAAgBvC,KAAKgC,WAClBO,GAAe,CACpB,IAAMC,EAAIC,KAAKC,MAAsB,EAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,EAAhBD,KAAKE,UAFNE,EAAA/C,OAAA8B,EAAA,EAAA9B,CAGGE,KAAKuB,KAAKiB,GAAGI,GAHhB,GAGb3C,EAHa4C,EAAA,GAAAA,EAAA,KAKlB7C,KAAKuB,KAAKiB,GAAGI,GAAK,CAAC3C,GAAO,KACxBsC,8CAKkB,IAAAO,EACL9C,KAAK+C,eADAC,EAAAlD,OAAA8B,EAAA,EAAA9B,CAAAgD,EAAA,GACjBG,EADiBD,EAAA,GACXE,EADWF,EAAA,GAElBP,KAAKU,MAAMV,KAAKE,UACpB3C,KAAKoD,WAAWH,EAAMC,GAEtBlD,KAAKqD,QAAQJ,EAAMC,0CAImC,IAArCD,EAAqCK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,IAArB,EACnCL,GAAiB,IAAVA,EAAcR,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgBM,EACrD,IAAIC,EAAKT,KAAKC,MAAsB,EAAhBD,KAAKE,UACzB,GAAIO,IAAOD,EACT,OAAOjD,KAAK+C,aAAaE,GAE3B,IAAMQ,EAAQhB,KAAKC,MAAsB,EAAhBD,KAAKE,UAC9B,MAAO,CAAS,EAARc,EAAYR,EAAc,EAARQ,EAAYP,mCAGxBD,EAAcC,GAC5B,IAAMQ,EAAO1D,KAAKuB,KAAK2B,GACvBlD,KAAKuB,KAAK2B,GAAMlD,KAAKuB,KAAK0B,GAC1BjD,KAAKuB,KAAK0B,GAAQS,qCAGDT,EAAcC,GAC/BlD,KAAKuB,KAAKoC,QAAQ,SAAAvD,GAChB,IAAMsD,EAAOtD,EAAI8C,GACjB9C,EAAI8C,GAAM9C,EAAI6C,GACd7C,EAAI6C,GAAQS,uCAKd,IAAME,EAAS,IAAI7B,EAAO/B,MAE1B,OADA4D,EAAO3B,KAAOjC,KAAKiC,KAAKlB,IAAI,SAAA8C,GAAC,OAAIA,EAAE5C,aAC5B2C,uCAGWxD,EAAaC,GAG/B,OAFAL,KAAKkC,WAAa,CAAE9B,MAAKC,UACzBL,KAAKiC,KAAOjC,KAAKiC,KAAKlB,IAAI,SAAA8C,GAAC,OAAIA,EAAEC,WAAW1D,EAAKC,KAC1C,IAAI0B,EAAO/B,uCAGJW,GACd,IAAMiD,EAAS,IAAI7B,EAAO/B,MAE1B,OADA4D,EAAO3B,KAAOjC,KAAKiC,KAAKlB,IAAI,SAAA8C,GAAC,OAAIA,EAAExC,SAASV,KACrCiD,wCAIP,IAAMA,EAAS,IAAI7B,EAAO/B,MAE1B,OADA4D,EAAO3B,KAAOjC,KAAKiC,KAAKlB,IAAI,SAAA8C,GAAC,OAAIA,EAAEvC,gBAC5BsC,6CASP,IALA,IAAMG,EAAa/D,KAAKiC,KAAK+B,OAAO,SAACC,EAAeC,GAAhB,OAClCD,EAAIE,OAAOD,EAAKE,WAAWrD,IAAI,SAAAC,GAAC,OAAIA,EAAEqD,YAAc,IAAI,KACxD,IAEIC,EAAS,GALmBC,EAAA,SAMzB7C,GACwC,IAA3CqC,EAAWS,OAAO,SAAAC,GAAC,OAAIA,IAAM/C,IAAG6B,QAClCe,EAAOI,KAAKhD,IAFPA,EAAI,EAAGA,GAAK,EAAGA,IAAK6C,EAApB7C,GAKT,OAAO4C,mCAGOK,GACd,IAAMC,EAAY,SAACC,GAAD,OAAyB,IAARA,EAAY,EAAIA,EAAM,GACnDC,EAAY,SAACD,GAAD,OAAyB,IAARA,EAAY,EAAIA,EAAM,GAEzD,OAAQF,GACN,KAAKxF,EAAU4F,GACb/E,KAAKkC,WAAW9B,IAAM0E,EAAU9E,KAAKkC,WAAW9B,KAChD,MACF,KAAKjB,EAAU6F,KACbhF,KAAKkC,WAAW9B,IAAMwE,EAAU5E,KAAKkC,WAAW9B,KAChD,MACF,KAAKjB,EAAU8F,MACbjF,KAAKkC,WAAW7B,OAASuE,EAAU5E,KAAKkC,WAAW7B,QACnD,MACF,KAAKlB,EAAU+F,KACblF,KAAKkC,WAAW7B,OAASyE,EAAU9E,KAAKkC,WAAW7B,QAIvD,OAAOL,KAAKmF,aAAanF,KAAKkC,WAAW9B,IAAKJ,KAAKkC,WAAW7B,2CAI9D,OAAOL,KAAKiC,KAAKmD,MAAM,SAAAvB,GAAC,OAAIA,EAAEO,WAAWgB,MAAM,SAAApE,GAAC,OAAIA,EAAEqE,gDA/H1CrD,GACZ,IAAM4B,EAAS,IAAI7B,EAInB,OAHA6B,EAAO5B,WAAaA,EACpB4B,EAAOrC,KAAOO,EAAKf,IAAI,SAAA8C,GAAC,OAAIA,EAAE9C,IAAI,SAAAC,GAAC,MAAI,CAACA,GAAG,OAC3C4C,EAAO0B,iBACA1B,WCpBL2B,EAA2B,CAC/BvD,WAAY5C,EAAW+C,KACvByB,OAAQ7B,EAAOF,OAAOzC,EAAW+C,OCZnC,IAAMqD,EAAcC,YAAgB,CAClCC,KDcK,WAGO,IAFZ/G,EAEY2E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFJiC,EACRI,EACYrC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACZ,OAAQmC,EAAOC,MACb,KAAKvG,EACH,MAAO,CACL2C,WAAY2D,EAAOE,QACnBjC,OAAQ7B,EAAOF,OAAO8D,EAAOE,UAEjC,KAAKvG,EACH,OAAOQ,OAAAgG,EAAA,EAAAhG,CAAA,GACFnB,EADL,CAEEiF,OAAQ7B,EAAOF,OAAOlD,EAAMqD,cAEhC,KAAKzC,EACH,OAAOO,OAAAgG,EAAA,EAAAhG,CAAA,GACFnB,EADL,CAEEiF,OAAQjF,EAAMiF,OAAO3C,aAEzB,KAAKzB,EACH,OAAOM,OAAAgG,EAAA,EAAAhG,CAAA,GACFnB,EADL,CAEEiF,OAAQjF,EAAMiF,OAAOuB,aAAaQ,EAAOE,QAAQzF,IAAKuF,EAAOE,QAAQxF,UAEzE,KAAKZ,EACH,OAAOK,OAAAgG,EAAA,EAAAhG,CAAA,GACFnB,EADL,CAEEiF,OAAQjF,EAAMiF,OAAOvC,SAASsE,EAAOE,QAAQlF,SAEjD,KAAKjB,EACH,OAAOI,OAAAgG,EAAA,EAAAhG,CAAA,GACFnB,EADL,CAEEiF,OAAQjF,EAAMiF,OAAOtC,gBAEzB,KAAK3B,EACH,OAAOG,OAAAgG,EAAA,EAAAhG,CAAA,GACFnB,EADL,CAEEiF,OAAQjF,EAAMiF,OAAOmC,SAASJ,EAAOE,QAAQG,aAEjD,QACE,OAAOrH,+BE7CQsH,4MAIU,IAAAC,EAAAlG,KAC3B,OACEmG,EAAAC,EAAAC,cAAA,OACEC,UAAS,wBAAAnC,OAA0BnE,KAAKuG,oBACxCC,MAAOxG,KAAKyG,kBACZC,IAAI,OACJC,QAAS,kBAAMT,EAAKU,gBAEpBT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAoBtG,KAAK6G,MAAMnG,KAAK2D,mDAMxDrE,KAAK6G,MAAM/C,WAAW9D,KAAK6G,MAAMnG,KAAKoG,SAAU9G,KAAK6G,MAAMnG,KAAKU,uDAIhE,IAAM2F,EAAY,GAAA5C,OAAMnE,KAAK6G,MAAME,KAAjB,MAElB,MAAO,CACLC,OAAQD,EACRE,MAAOF,EACPG,SAJoB,GAAA/C,OAAM1B,KAAKC,MAAwB,IAAlB1C,KAAK6G,MAAME,MAA5B,kDAStB,IAAMrG,EAAOV,KAAK6G,MAAMnG,KAClBN,EAAMM,EAAKoG,SACXK,EAAsC,CAC1CC,kBAAmB1G,EAAK2G,WAAa,IAAM,EAC3CC,aAAc5G,EAAK6G,UACnBC,gBAAmC,IAAnB9G,EAAK+G,UACrBC,cAAehH,EAAKS,YAItB,OAFArB,OAAA0B,EAAA,EAAA1B,CAAI6H,MAAM,KAAKhE,QAAQ,SAACnB,EAAGd,GAAJ,OAAUyF,EAAO,OAAAhD,OAAQzC,EAAR,UAAoBtB,IAAQsB,IAE7D5B,OAAO8H,KAAKT,GAAS3C,OAAO,SAAAqD,GAAG,OAAIV,EAAQU,KAAMC,KAAK,YA1ChBC,cCJ5BC,mLAKjB,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBE,MAAOxG,KAAKiI,eAC9CjI,KAAKkI,mDAMV,MAAO,CACLjB,MAAK,GAAA9C,OAAKnE,KAAK6G,MAAMsB,QAAhB,MACLnB,OAAM,GAAA7C,OAAKnE,KAAKoI,cAAV,2CAIgC,IAAAlC,EAAAlG,KACxC,OAAOA,KAAK6G,MAAMzG,IACfgE,WACArD,IAAI,SAACC,EAAGU,GAAJ,OAAUyE,EAAAC,EAAAC,cAACgC,EAADvI,OAAAwI,OAAA,GAAgBpC,EAAKW,MAArB,CAA4BnG,KAAMM,EAAG+F,KAAMb,EAAKkC,cAAeP,IAAKnG,6CAIrF,OAAO1B,KAAK6G,MAAMsB,QAAU,SA1BgBJ,aCG3BQ,cAInB,SAAAA,EAAY1B,GAAqB,IAAAX,EAAA,OAAApG,OAAAC,EAAA,EAAAD,CAAAE,KAAAuI,IAC/BrC,EAAApG,OAAA0I,EAAA,EAAA1I,CAAAE,KAAAF,OAAA2I,EAAA,EAAA3I,CAAAyI,GAAAG,KAAA1I,KAAM6G,KAJA8B,kBAGyB,EAAAzC,EAFzB0C,eAEyB,EAAA1C,EA2BzB2C,YAAc,WACpB,IAAMC,EAAS5C,EAAKyC,aAAaI,QACjC,GAAID,EAAQ,CACV,IAAME,EAAoBF,EAAOG,wBAC3BC,EAAgBF,EAAkBhC,OAASgC,EAAkB/B,MAAQ+B,EAAkBhC,OAASgC,EAAkB/B,MAClHkC,EAAa,EAAI1G,KAAKC,MAAMwG,EAAgB,GAClDhD,EAAKkD,SAAS,CACZjB,QAASgB,SAGXE,sBAAsB,WACpBnD,EAAK2C,iBApCT3C,EAAKyC,aAAeW,IAAMC,YAC1BrD,EAAKvH,MAAQ,CACXwJ,QAAS,GAEXjC,EAAK0C,UAAYY,KAAKC,MANSvD,wEAU/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBI,IAAK1G,KAAK2I,cACzC3I,KAAK0J,aACL1J,KAAK2J,mEAMV3J,KAAK6I,cACLlL,OAAOiM,iBAAiB,SAAU5J,KAAK6I,4DAIvClL,OAAOkM,oBAAoB,SAAU7J,KAAK6I,kDAmBD,IAAAiB,EAAA9J,KACzC,OAAKA,KAAKrB,MAAMwJ,QAGTnI,KAAK6G,MAAMjD,OAAOmG,UAAUhJ,IAAI,SAAC8C,EAAGnC,GAAJ,OACrCyE,EAAAC,EAAAC,cAAC2D,EAADlK,OAAAwI,OAAA,CAAWlI,IAAKyD,EAAGgE,IAAKnG,EAAGyG,QAAS2B,EAAKnL,MAAMwJ,SAAa2B,EAAKjD,UAH1D,mDAQT,IAAK7G,KAAK6G,MAAMjD,OAAOyB,WACrB,OAAO,KAET,IACM4E,EADUT,KAAKC,MACUzJ,KAAK4I,UACpC,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBE,MAAO,CACpCS,MAAK,GAAA9C,OAAKnE,KAAKrB,MAAMwJ,QAAhB,MACLnB,OAAM,GAAA7C,OAAKnE,KAAKrB,MAAMwJ,QAAhB,MACN+B,WAAU,IAAA/F,OAAMnE,KAAKrB,MAAMwJ,QAAU,EAA3B,QAEVhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBtG,KAAKmK,kBAAkBF,iDAM1DG,GACxB,IAAMC,EAAM,SAACC,GAAD,OAAiB7H,KAAKU,MAAMmH,GAAKC,WAAWC,SAAS,EAAG,MAE9DC,EAAUJ,EAAKD,EAAe,IAAQ,IACtCM,EAAUL,EAAKD,EAAY,IAAkB,IAC7CO,EAAQN,EAAKD,EAAY,KAAuB,IAEtD,SAAAjG,OAAUwG,EAAV,KAAAxG,OAAmBuG,EAAnB,KAAAvG,OAA8BsG,UAnFW1C,aCLvC6C,SAAU,CACd,CACEC,MAAO,YACP5K,MAAOb,EAAW0L,UAEpB,CACED,MAAO,OACP5K,MAAOb,EAAW+C,MAEpB,CACE0I,MAAO,SACP5K,MAAOb,EAAW2L,QAEpB,CACEF,MAAO,OACP5K,MAAOb,EAAW4L,MAEpB,CACEH,MAAO,YACP5K,MAAOb,EAAW6L,UAEpB,CACEJ,MAAO,SACP5K,MAAOb,EAAW8L,UAqBPC,EAjBwE,SAAAtE,GAMrF,OACEV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqBrG,MAAO4G,EAAM7E,WAAYoJ,SAN7C,SAACC,GACpB,IAAMpL,GAASoL,EAAEC,OAAOrL,MACxB4G,EAAM0E,iBAAiBtL,KAKpB2K,EAAQ7J,IAAI,SAAAyB,GAAC,OACZ2D,EAAAC,EAAAC,cAAA,UAAQpG,MAAOuC,EAAEvC,MAAO4H,IAAKrF,EAAEvC,OAC5BuC,EAAEqI,WCrBEW,EAXkD,SAAA3E,GAC/D,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcK,QAASE,EAAM4E,eAA/C,YACAtF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBK,QAASE,EAAM6E,kBAApD,YACAvF,EAAAC,EAAAC,cAACsF,EAAuB9E,KCKf+E,SAbsD,SAAA/E,GACnE,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZxG,OAAA0B,EAAA,EAAA1B,CAAI6H,MAAM,IAAIC,QAAQiE,MAAM,GAAG9K,IAAI,SAAAyB,GAAC,OAAI2D,EAAAC,EAAAC,cAAA,UAAQwB,IAAKrF,EAAGmE,QAAS,kBAAME,EAAMxF,SAASmB,KAAKA,MAE9F2D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAME,EAAMvF,gBAA7B,iBCQFwK,6MA2BIC,eAAiB,SAACV,GACxB,IAAMxD,EAAMwD,EAAEW,MACVnE,GAAO,IAAMA,GAAO,GACtB3B,EAAKW,MAAMxF,SAASwG,EAAM,IACT,IAARA,GAAqB,IAARA,EACtB3B,EAAKW,MAAMvF,cACM,KAARuG,EACT3B,EAAKW,MAAMoF,cAAc9M,EAAU+F,MAClB,KAAR2C,EACT3B,EAAKW,MAAMoF,cAAc9M,EAAU4F,IAClB,KAAR8C,EACT3B,EAAKW,MAAMoF,cAAc9M,EAAU8F,OAClB,KAAR4C,GACT3B,EAAKW,MAAMoF,cAAc9M,EAAU6F,+EAtCrC,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAC6F,EAAqBlM,KAAK6G,OAC3BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC8F,EAAoBnM,KAAK6G,QAE5BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC+F,EAAUpM,KAAK6G,qDAQtBwF,SAASzC,iBAAiB,UAAW5J,KAAK+L,+DAI1CM,SAASxC,oBAAoB,UAAW7J,KAAK+L,uBAxB/BhE,aAkDHuE,cALS,SAAC3N,GAAD,MAAsB,CAC5CiF,OAAQjF,EAAM+G,KAAK9B,OACnB5B,WAAYrD,EAAM+G,KAAK1D,aAKvB,CAAEuJ,iBC3EG,SAA0BvJ,GAC/B,MAAO,CACL4D,KAAMvG,EACNwG,QAAS7D,IDwESyJ,cCpEf,WACL,MAAO,CACL7F,KAAMtG,IDkE2BoM,iBC9D9B,WACL,MAAO,CACL9F,KAAMrG,ID4D6CuE,WCxDhD,SAAoB1D,EAAaC,GACtC,MAAO,CACLuF,KAAMpG,EACNqG,QAAS,CACPzF,MACAC,YDmD6DgB,SC9C5D,SAAkBV,GACvB,MAAO,CACLiF,KAAMnG,EACNoG,QAAS,CACPlF,WD0CuEW,YCrCtE,WACL,MAAO,CACLsE,KAAMlG,IDmCgFuM,cC/BnF,SAAuBjG,GAC5B,MAAO,CACLJ,KAAMjG,EACNkG,QAAS,CACPG,gBDyBSsG,CAGbR,GEpEIS,ETAUC,YACZhH,GSOJiH,IAASC,OAAOvG,EAAAC,EAAAC,cANH,kBACXF,EAAAC,EAAAC,cAACsG,EAAA,EAAD,CAAUJ,MAAOA,GACfpG,EAAAC,EAAAC,cAACuG,EAAD,QAIY,MAAUP,SAASQ,eAAe,ShBQ3C,SAAkB5O,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI4O,IACnBC,UACDpP,OAAOC,SAASoP,MAEJC,SAAWtP,OAAOC,SAASqP,OAIvC,OAGFtP,OAAOiM,iBAAiB,OAAQ,WAC9B,IAAM5L,EAAK,GAAAmG,OAAM4I,UAAN,sBAEPtP,GAgEV,SAAiCO,EAAeC,GAE9CiP,MAAMlP,GACHK,KAAK,SAAA8O,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CtP,UAAUC,cAAcsP,MAAMpP,KAAK,SAAAC,GACjCA,EAAaoP,aAAarP,KAAK,WAC7BV,OAAOC,SAAS+P,aAKpB5P,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFA8O,CAAwB5P,EAAOC,GAI/BC,UAAUC,cAAcsP,MAAMpP,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MgBtC/BE","file":"static/js/main.d6b35fc0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Sudoku from \"../models/Sudoku\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface ISudokuState {\r\n  difficulty: DIFFICULTY;\r\n  sudoku: Sudoku;\r\n}\r\n\r\nexport enum DIRECTION {\r\n  Up,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n\r\nexport const CHANGE_DIFFICULTY = \"CHANGE_DIFFICULTY\";\r\nexport const NEW_GAME = \"NEW_GAME\";\r\nexport const VALIDATE_SOLUTION = \"VALIDATE_SOLUTION\";\r\nexport const TOGGLE_CELL = \"TOGGLE_CELLs\";\r\nexport const SET_DIGIT = \"SET_DIGIT\";\r\nexport const REMOVE_DIGIT = \"REMOVE_DIGIT\";\r\nexport const NAVIGATE_CELLS = \"NAVIGATE_CELLS\";\r\n\r\ninterface IChangeDifficultyAction {\r\n  type: typeof CHANGE_DIFFICULTY;\r\n  payload: DIFFICULTY;\r\n}\r\n\r\ninterface INewGameAction {\r\n  type: typeof NEW_GAME;\r\n}\r\n\r\ninterface IValidateSolutionAction {\r\n  type: typeof VALIDATE_SOLUTION;\r\n}\r\n\r\ninterface IToggleCellAction {\r\n  type: typeof TOGGLE_CELL;\r\n  payload: {\r\n    row: number;\r\n    column: number;\r\n  }\r\n}\r\n\r\ninterface ISetDigitAction {\r\n  type: typeof SET_DIGIT;\r\n  payload: {\r\n    digit: number;\r\n  }\r\n}\r\n\r\ninterface IRemoveDigitAction {\r\n  type: typeof REMOVE_DIGIT;\r\n}\r\n\r\ninterface INavigateCellsAction {\r\n  type: typeof NAVIGATE_CELLS;\r\n  payload: {\r\n    direction: DIRECTION;\r\n  }\r\n}\r\n\r\nexport type OptionActions = IChangeDifficultyAction\r\n  | INewGameAction\r\n  | IValidateSolutionAction\r\n  | IToggleCellAction\r\n  | ISetDigitAction\r\n  | IRemoveDigitAction\r\n  | INavigateCellsAction;","\r\nexport enum DIFFICULTY {\r\n  VeryEasy = 30,\r\n  Easy = 36,\r\n  Normal = 42,\r\n  Hard = 48,\r\n  VeryHard = 54,\r\n  Insane = 60\r\n\r\n}","export default class Cell {\r\n  private value: number | null;\r\n  private valid: boolean;\r\n  private solution: number;\r\n  private row: number;\r\n  private column: number;\r\n  private given: boolean;\r\n  private active: boolean;\r\n\r\n  private constructor(previous?: Cell) {\r\n    this.value = previous ? previous.value : null;\r\n    this.solution = previous ? previous.solution : -1;\r\n    this.row = previous ? previous.row : -1;\r\n    this.column = previous ? previous.column : -1;\r\n    this.given = previous ? previous.given : false;\r\n    this.active = previous ? previous.active : false;\r\n    this.valid = previous ? previous.valid : true;\r\n  }\r\n\r\n  static create(solution: number, row: number, column: number, given: boolean): Cell {\r\n    const cell = new Cell();\r\n    cell.solution = solution;\r\n    cell.row = row;\r\n    cell.column = column;\r\n    cell.given = given;\r\n    cell.value = given ? solution : null;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public getSolution(): number {\r\n    return this.solution;\r\n  }\r\n\r\n  public getValue(): number | null {\r\n    return this.value;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public getBlock(): number {\r\n    if (this.row <= 3) {\r\n      return this.calculateBlock(0);\r\n    } else if (this.row >= 4 && this.row <= 6) {\r\n      return this.calculateBlock(1);\r\n    } else {\r\n      return this.calculateBlock(2);\r\n    }\r\n  }\r\n\r\n  private calculateBlock(modifier: number): number {\r\n    if (this.column <= 3) {\r\n      return modifier + 1;\r\n    } else if (this.column >= 4 && this.column <= 6) {\r\n      return modifier + 2;\r\n    } else {\r\n      return modifier + 3;\r\n    }\r\n  }\r\n\r\n  public isGiven(): boolean {\r\n    return this.given;\r\n  }\r\n\r\n  public validate(): Cell {\r\n    const cell = new Cell(this)\r\n    cell.valid = this.value === null || this.value === this.solution;\r\n    return cell;\r\n  }\r\n\r\n  public isValid(): boolean {\r\n    return this.valid;\r\n  }\r\n\r\n  public setActive(active: boolean): Cell {\r\n    const cell = new Cell(this);\r\n    cell.active = active;\r\n    return cell;\r\n  }\r\n\r\n  public setDigit(digit: number): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    this.value = digit;\r\n    this.valid = true;\r\n    return new Cell(this);\r\n  }\r\n\r\n  public removeDigit(): Cell {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    this.value = null;\r\n    this.valid = true;\r\n    return new Cell(this);\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.value === this.solution;\r\n  }\r\n}\r\n","import Cell from \"./Cell\";\r\nimport { DIRECTION } from \"../store/types\";\r\n\r\nexport default class Row {\r\n  private cells: Cell[];\r\n  private index: number;\r\n  private active: boolean;\r\n\r\n  private constructor(previous?: Row) {\r\n    this.index = previous ? previous.index : -1;\r\n    this.active = previous ? previous.active : false;\r\n    this.cells = previous ? previous.cells : [];\r\n  }\r\n\r\n  static create(data: [number, boolean][], index: number): Row {\r\n    const row = new Row();\r\n    row.cells = [...data.map(([value, given], i) => Cell.create(value, index, i + 1, given))];\r\n    row.index = index;\r\n    return row;\r\n  }\r\n\r\n  public getCells(): Cell[] {\r\n    return this.cells;\r\n  }\r\n\r\n  public validate(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.validate());\r\n    return row;\r\n  }\r\n\r\n  public getIndex(): number {\r\n    return this.index;\r\n  }\r\n\r\n  public toggleCell(index: number, column: number): Row {\r\n    if (this.index !== index && !this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n\r\n    if (this.active) {\r\n      if (this.index === index) {\r\n        row.cells = this.cells.map(c => {\r\n          return c.setActive(c.isActive() ? false : c.getColumn() === column);\r\n        });\r\n      } else {\r\n        row.active = false;\r\n        row.cells = this.cells.map(c => c.isActive() ? c.setActive(false) : c);\r\n      }\r\n    } else if (this.index === index) {\r\n      row.active = true;\r\n      row.cells = this.cells.map(c => c.getColumn() === column ? c.setActive(true) : c);\r\n    }\r\n    return row;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public setDigit(digit: number): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    this.cells = this.cells.map(c => c.setDigit(digit));\r\n    return new Row(this);\r\n  }\r\n\r\n  public removeDigit(): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    this.cells = this.cells.map(c => c.removeDigit());\r\n    return new Row(this);\r\n  }\r\n\r\n}\r\n","import Row from \"./Row\";\r\nimport { DIFFICULTY } from \"./Difficulty\";\r\nimport { DIRECTION } from \"../store/types\";\r\n\r\nconst BASE = [\r\n  [3, 6, 1, 7, 2, 5, 9, 4, 8],\r\n  [5, 8, 7, 9, 6, 4, 2, 1, 3],\r\n  [4, 9, 2, 8, 3, 1, 6, 5, 7],\r\n  [6, 3, 8, 2, 5, 9, 4, 7, 1],\r\n  [1, 7, 4, 6, 8, 3, 5, 9, 2],\r\n  [2, 5, 9, 1, 4, 7, 8, 3, 6],\r\n  [7, 4, 6, 3, 9, 2, 1, 8, 5],\r\n  [9, 2, 3, 5, 1, 8, 7, 6, 4],\r\n  [8, 1, 5, 4, 7, 6, 3, 2, 9]\r\n];\r\n\r\nexport default class Sudoku {\r\n  private difficulty: DIFFICULTY;\r\n  private data: ([number, boolean][])[];\r\n  private rows: Row[];\r\n  private activeCell: { row: number, column: number };\r\n\r\n  private constructor(previous?: Sudoku) {\r\n    this.difficulty = previous ? previous.difficulty : DIFFICULTY.Easy;\r\n    this.data = previous ? previous.data : [];\r\n    this.rows = previous ? previous.rows : [];\r\n    this.activeCell = previous ? previous.activeCell : { row: -1, column: -1 }\r\n  }\r\n\r\n  static create(difficulty: DIFFICULTY): Sudoku {\r\n    const sudoku = new Sudoku();\r\n    sudoku.difficulty = difficulty;\r\n    sudoku.data = BASE.map(r => r.map(c => [c, true] as [number, boolean]));\r\n    sudoku.generateSudoku();\r\n    return sudoku\r\n  }\r\n\r\n  public getRows(): Row[] {\r\n    return this.rows;\r\n  }\r\n\r\n  private generateSudoku() {\r\n    for (let i = 0; i < 1000; i++) {\r\n      this.moveRowOrColumn();\r\n    }\r\n    this.removeValues();\r\n    this.rows = this.data.map((d, i) => Row.create(d, i + 1))\r\n  }\r\n\r\n  private removeValues() {\r\n    let cellsToRemove = this.difficulty as number\r\n    while (cellsToRemove) {\r\n      const x = Math.floor(Math.random() * 9);\r\n      const y = Math.floor(Math.random() * 9);\r\n      const [value, given] = this.data[x][y]\r\n      if (given) {\r\n        this.data[x][y] = [value, false] as [number, boolean];\r\n        --cellsToRemove;\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveRowOrColumn() {\r\n    const [from, to] = this.getFromAndTo()\r\n    if (!!Math.round(Math.random())) {\r\n      this.moveColumn(from, to);\r\n    } else {\r\n      this.moveRow(from, to);\r\n    }\r\n  }\r\n\r\n  private getFromAndTo(from: number = -1): [number, number] {\r\n    from = from === -1 ? Math.floor(Math.random() * 3) : from;\r\n    let to = Math.floor(Math.random() * 3);\r\n    if (to === from) {\r\n      return this.getFromAndTo(from);\r\n    }\r\n    const block = Math.floor(Math.random() * 3);\r\n    return [block * 3 + from, block * 3 + to];\r\n  }\r\n\r\n  private moveRow(from: number, to: number) {\r\n    const temp = this.data[to];\r\n    this.data[to] = this.data[from];\r\n    this.data[from] = temp;\r\n  }\r\n\r\n  private moveColumn(from: number, to: number) {\r\n    this.data.forEach(row => {\r\n      const temp = row[to];\r\n      row[to] = row[from];\r\n      row[from] = temp;\r\n    });\r\n  }\r\n\r\n  public validate(): Sudoku {\r\n    const sudoku = new Sudoku(this)\r\n    sudoku.rows = this.rows.map(r => r.validate());\r\n    return sudoku;\r\n  }\r\n\r\n  public activateCell(row: number, column: number): Sudoku {\r\n    this.activeCell = { row, column };\r\n    this.rows = this.rows.map(r => r.toggleCell(row, column));\r\n    return new Sudoku(this);\r\n  }\r\n\r\n  public setDigit(digit: number): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.setDigit(digit));\r\n    return sudoku;\r\n  }\r\n\r\n  public removeDigit(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.removeDigit());\r\n    return sudoku;\r\n  }\r\n\r\n  public getSolvedNumbers(): number[] {\r\n    const allNumbers = this.rows.reduce((acc: number[], next: Row) =>\r\n      acc.concat(next.getCells().map(c => c.getValue() || 0), []),\r\n      []\r\n    );\r\n    const solved = []\r\n    for (let i = 1; i <= 9; i++) {\r\n      if (allNumbers.filter(n => n === i).length === 9) {\r\n        solved.push(i);\r\n      }\r\n    }\r\n    return solved;\r\n  }\r\n\r\n  public navigate(dirrection: DIRECTION): Sudoku {\r\n    const increment = (val: number) => val === 9 ? 1 : val + 1;\r\n    const decrement = (val: number) => val === 1 ? 9 : val - 1;\r\n\r\n    switch (dirrection) {\r\n      case DIRECTION.Up:\r\n        this.activeCell.row = decrement(this.activeCell.row);\r\n        break;\r\n      case DIRECTION.Down:\r\n        this.activeCell.row = increment(this.activeCell.row);\r\n        break;\r\n      case DIRECTION.Right:\r\n        this.activeCell.column = increment(this.activeCell.column);\r\n        break;\r\n      case DIRECTION.Left:\r\n        this.activeCell.column = decrement(this.activeCell.column);\r\n\r\n        break;\r\n    }\r\n    return this.activateCell(this.activeCell.row, this.activeCell.column);\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.rows.every(r => r.getCells().every(c => c.isSolved()))\r\n  }\r\n}\r\n","import {\r\n  ISudokuState as IGameState,\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  REMOVE_DIGIT\r\n} from \"./types\";\r\nimport Sudoku from \"../models/Sudoku\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nconst initialState: IGameState = {\r\n  difficulty: DIFFICULTY.Easy,\r\n  sudoku: Sudoku.create(DIFFICULTY.Easy)\r\n};\r\n\r\nexport function gameReducer(\r\n  state = initialState,\r\n  action: OptionActions\r\n): IGameState {\r\n  switch (action.type) {\r\n    case CHANGE_DIFFICULTY:\r\n      return {\r\n        difficulty: action.payload,\r\n        sudoku: Sudoku.create(action.payload)\r\n      };\r\n    case NEW_GAME:\r\n      return {\r\n        ...state,\r\n        sudoku: Sudoku.create(state.difficulty)\r\n      };\r\n    case VALIDATE_SOLUTION:\r\n      return {\r\n        ...state,\r\n        sudoku: state.sudoku.validate()\r\n      };\r\n    case TOGGLE_CELL:\r\n      return {\r\n        ...state,\r\n        sudoku: state.sudoku.activateCell(action.payload.row, action.payload.column)\r\n      };\r\n    case SET_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: state.sudoku.setDigit(action.payload.digit)\r\n      };\r\n    case REMOVE_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: state.sudoku.removeDigit()\r\n      };\r\n    case NAVIGATE_CELLS:\r\n      return {\r\n        ...state,\r\n        sudoku: state.sudoku.navigate(action.payload.direction)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\n\r\nimport { gameReducer } from \"./reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer\r\n  );\r\n\r\n  return store;\r\n}\r\n","import React, { Component, CSSProperties } from \"react\";\r\nimport \"../layout/SudokuCell.scss\";\r\nimport Cell from \"../models/Cell\";\r\nimport { toggleCell } from \"../store/actions\";\r\n\r\nexport interface ISudokuCellComponentActions {\r\n  toggleCell: typeof toggleCell\r\n}\r\n\r\nexport interface ISudokuCellComponentProps extends ISudokuCellComponentActions {\r\n  cell: Cell;\r\n  size: number;\r\n}\r\n\r\n\r\nexport default class SudokuCellComponent extends Component<\r\n  ISudokuCellComponentProps\r\n  > {\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div\r\n        className={`SudokuCell-container ${this.calculateClasses()}`}\r\n        style={this.calculateStyles()}\r\n        ref=\"cell\"\r\n        onClick={() => this.handleClick()}\r\n      >\r\n        <span className=\"SudokuCell-value\">{this.props.cell.getValue()}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleClick(): void {\r\n    this.props.toggleCell(this.props.cell.getRow(), this.props.cell.getColumn())\r\n  }\r\n\r\n  private calculateStyles(): CSSProperties {\r\n    const size: string = `${this.props.size}px`;\r\n    const fontSize: string = `${Math.floor(this.props.size * 0.68)}px`;\r\n    return {\r\n      height: size,\r\n      width: size,\r\n      fontSize: fontSize\r\n    };\r\n  }\r\n\r\n  private calculateClasses(): string {\r\n    const cell = this.props.cell;\r\n    const row = cell.getRow();\r\n    const classes: { [key: string]: boolean } = {\r\n      \"even-block-cell\": cell.getBlock() % 2 === 0,\r\n      \"given-cell\": cell.isGiven(),\r\n      \"invalid-cell\": cell.isValid() !== true,\r\n      \"active-cell\": cell.isActive()\r\n    };\r\n    [...Array(10)].forEach((x, i) => classes[`row-${i}-cell`] = row === i);\r\n\r\n    return Object.keys(classes).filter(key => classes[key]).join(\" \");\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Row from \"../models/Row\";\r\nimport \"../layout/SudokuRow.scss\";\r\nimport SudokuCell, { ISudokuCellComponentActions } from \"./SudokuCell\";\r\n\r\nexport interface ISudokuRowProps extends ISudokuCellComponentActions {\r\n  row: Row;\r\n  rowSize: number;\r\n}\r\n\r\nexport default class SudokuRowComponent extends Component<\r\n  ISudokuRowProps\r\n  > {\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"SudokuRow-container\" style={this.getRowStyle()}>\r\n        {this.renderRow()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getRowStyle(): React.CSSProperties {\r\n    return {\r\n      width: `${this.props.rowSize}px`,\r\n      height: `${this.getCellSize()}px`\r\n    };\r\n  }\r\n\r\n  private renderRow(): JSX.Element[] | null {\r\n    return this.props.row\r\n      .getCells()\r\n      .map((c, i) => <SudokuCell {...this.props} cell={c} size={this.getCellSize()} key={i} />);\r\n  }\r\n\r\n  private getCellSize(): number {\r\n    return this.props.rowSize / 9;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../layout/Sudoku.scss\";\r\nimport Sudoku from \"../models/Sudoku\";\r\nimport SudokuRow from \"./SudokuRow\";\r\nimport { ISudokuCellComponentActions } from \"./SudokuCell\";\r\n\r\nexport interface ISudokuProps extends ISudokuCellComponentActions {\r\n  sudoku: Sudoku;\r\n}\r\n\r\nexport interface ISudokuState {\r\n  rowSize: number;\r\n}\r\n\r\nexport default class SudokuComponent extends Component<ISudokuProps, ISudokuState> {\r\n  private containerRef: React.RefObject<HTMLDivElement>;\r\n  private startTime: number;\r\n\r\n  constructor(props: ISudokuProps) {\r\n    super(props);\r\n    this.containerRef = React.createRef();\r\n    this.state = {\r\n      rowSize: 0\r\n    };\r\n    this.startTime = Date.now();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"Sudoku-container\" ref={this.containerRef}>\r\n        {this.renderRows()}\r\n        {this.renderSolvedOverlay()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.setCellSize();\r\n    window.addEventListener(\"resize\", this.setCellSize);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    window.removeEventListener(\"resize\", this.setCellSize);\r\n  }\r\n\r\n  private setCellSize = () => {\r\n    const rowDOM = this.containerRef.current;\r\n    if (rowDOM) {\r\n      const boundingRectangle = rowDOM.getBoundingClientRect();\r\n      const rawDimmension = boundingRectangle.height < boundingRectangle.width ? boundingRectangle.height : boundingRectangle.width;\r\n      const dimmension = 9 * Math.floor(rawDimmension / 9)\r\n      this.setState({\r\n        rowSize: dimmension\r\n      });\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        this.setCellSize();\r\n      });\r\n    }\r\n  }\r\n\r\n  private renderRows(): JSX.Element[] | null {\r\n    if (!this.state.rowSize) {\r\n      return null;\r\n    }\r\n    return this.props.sudoku.getRows().map((r, i) => (\r\n      <SudokuRow row={r} key={i} rowSize={this.state.rowSize} {...this.props} />\r\n    ));\r\n  }\r\n\r\n  private renderSolvedOverlay(): JSX.Element | null {\r\n    if (!this.props.sudoku.isSolved()) {\r\n      return null;\r\n    }\r\n    const endTime = Date.now()\r\n    const ellapsedTime = endTime - this.startTime\r\n    return (\r\n      <div className=\"Sudoku-solved\" style={{\r\n        width: `${this.state.rowSize}px`,\r\n        height: `${this.state.rowSize}px`,\r\n        marginLeft: `-${this.state.rowSize / 2}px`\r\n      }}>\r\n        <div className=\"Sudoku-solved-message\">\r\n          <h1>You solved the puzzle!</h1>\r\n          <p>Ellapsed time: <span className=\"Sudoku-ellapsed\">{this.formatMillisecons(ellapsedTime)}</span></p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private formatMillisecons(milliSeconds: number): string {\r\n    const pad = (num: number) => Math.round(num).toString().padStart(2, '0');\r\n\r\n    const seconds = pad((milliSeconds / 1000) % 60);\r\n    const minutes = pad((milliSeconds / (1000 * 60)) % 60);\r\n    const hours = pad((milliSeconds / (1000 * 60 * 60)) % 24);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { changeDifficulty } from \"../store/actions\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface IDifficultySelectorProps {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  difficulty: DIFFICULTY;\r\n}\r\n\r\nconst options = [\r\n  {\r\n    label: \"Very Easy\",\r\n    value: DIFFICULTY.VeryEasy\r\n  },\r\n  {\r\n    label: \"Easy\",\r\n    value: DIFFICULTY.Easy\r\n  },\r\n  {\r\n    label: \"Normal\",\r\n    value: DIFFICULTY.Normal\r\n  },\r\n  {\r\n    label: \"Hard\",\r\n    value: DIFFICULTY.Hard\r\n  },\r\n  {\r\n    label: \"Very Hard\",\r\n    value: DIFFICULTY.VeryHard\r\n  },\r\n  {\r\n    label: \"Insane\",\r\n    value: DIFFICULTY.Insane\r\n  }\r\n];\r\n\r\nconst DifficultySelectorComponent: React.FunctionComponent<IDifficultySelectorProps> = props => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n    const value = +e.target.value as DIFFICULTY;\r\n    props.changeDifficulty(value);\r\n  };\r\n\r\n  return (\r\n    <select className=\"Options-difficulty\" value={props.difficulty} onChange={handleChange}>\r\n      {options.map(x => (\r\n        <option value={x.value} key={x.value}>\r\n          {x.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default DifficultySelectorComponent;\r\n","import \"../layout/Options.scss\";\r\nimport React from \"react\";\r\nimport { createNewGame, validateSolution } from \"../store/actions\";\r\nimport DifficultySelector, { IDifficultySelectorProps } from \"./DifficultySelector\";\r\n\r\nexport interface INewGameButtonProps {\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nexport interface IOptionsProps extends IDifficultySelectorProps {\r\n  validateSolution: typeof validateSolution;\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nconst OptionsComponent: React.FunctionComponent<IOptionsProps> = props => {\r\n  return (\r\n    <div className=\"Options-container\">\r\n      <button className=\"Options-new\" onClick={props.createNewGame}>New Game</button>\r\n      <button className=\"Options-validate\" onClick={props.validateSolution}>Validate</button>\r\n      <DifficultySelector {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default OptionsComponent;\r\n","import '../layout/Input.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport { setDigit, removeDigit } from '../store/actions';\r\n\r\ninterface InputComponentProps {\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n}\r\n\r\nconst InputComponent: React.FunctionComponent<InputComponentProps> = props => {\r\n  return (\r\n    <div className=\"Input-container\">\r\n      <div className=\"Input-numbers\">\r\n        {[...Array(10).keys()].slice(1).map(x => <button key={x} onClick={() => props.setDigit(x)}>{x}</button>)}\r\n      </div>\r\n      <div className=\"Input-utils\">\r\n        <button onClick={() => props.removeDigit()}>Clear</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputComponent;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../layout/App.scss\";\nimport SudokuComponent from \"./Sudoku\";\nimport OptionsComponent from \"./Options\";\nimport Input from \"./Input\";\nimport { AppState } from \"../store\";\nimport { changeDifficulty, createNewGame, validateSolution, toggleCell, setDigit, removeDigit, navigateCells } from \"../store/actions\";\nimport { DIFFICULTY } from \"../models/Difficulty\";\nimport Sudoku from \"../models/Sudoku\";\nimport { DIRECTION } from \"../store/types\";\n\n\ninterface IAppProps {\n  changeDifficulty: typeof changeDifficulty;\n  createNewGame: typeof createNewGame;\n  validateSolution: typeof validateSolution;\n  toggleCell: typeof toggleCell;\n  setDigit: typeof setDigit;\n  removeDigit: typeof removeDigit;\n  navigateCells: typeof navigateCells;\n  sudoku: Sudoku;\n  difficulty: DIFFICULTY;\n}\n\nclass App extends Component<IAppProps> {\n  public render(): JSX.Element {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Sudoku</h1>\n        </header>\n        <OptionsComponent {...this.props} />\n        <div className=\"App-content\">\n          <SudokuComponent {...this.props} />\n        </div>\n        <div className=\"App-footer\">\n          <Input {...this.props} />\n        </div>\n      </div>\n    );\n  }\n\n\n  public componentDidMount(): void {\n    document.addEventListener(\"keydown\", this.handleKeyboard);\n  }\n\n  public componentWillUnmount(): void {\n    document.removeEventListener(\"keydown\", this.handleKeyboard);\n  }\n\n  private handleKeyboard = (e: KeyboardEvent) => {\n    const key = e.which;\n    if (key >= 48 && key <= 57) {\n      this.props.setDigit(key - 48);\n    } else if (key === 8 || key === 2) { // backspace || delete\n      this.props.removeDigit()\n    } else if (key === 37) { //left \n      this.props.navigateCells(DIRECTION.Left);\n    } else if (key === 38) { //up\n      this.props.navigateCells(DIRECTION.Up);\n    } else if (key === 39) { // right\n      this.props.navigateCells(DIRECTION.Right);\n    } else if (key === 40) { // down\n      this.props.navigateCells(DIRECTION.Down);\n    }\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  sudoku: state.game.sudoku,\n  difficulty: state.game.difficulty\n});\n\nexport default connect(\n  mapStateToProps,\n  { changeDifficulty, createNewGame, validateSolution, toggleCell, setDigit, removeDigit, navigateCells }\n)(App);\n","import { OptionActions, CHANGE_DIFFICULTY, NEW_GAME, VALIDATE_SOLUTION, TOGGLE_CELL, SET_DIGIT, REMOVE_DIGIT, NAVIGATE_CELLS, DIRECTION } from \"./types\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport function changeDifficulty(difficulty: DIFFICULTY): OptionActions {\r\n  return {\r\n    type: CHANGE_DIFFICULTY,\r\n    payload: difficulty\r\n  };\r\n}\r\n\r\nexport function createNewGame(): OptionActions {\r\n  return {\r\n    type: NEW_GAME\r\n  };\r\n}\r\n\r\nexport function validateSolution(): OptionActions {\r\n  return {\r\n    type: VALIDATE_SOLUTION\r\n  };\r\n}\r\n\r\nexport function toggleCell(row: number, column: number): OptionActions {\r\n  return {\r\n    type: TOGGLE_CELL,\r\n    payload: {\r\n      row,\r\n      column\r\n    }\r\n  };\r\n}\r\n\r\nexport function setDigit(digit: number): OptionActions {\r\n  return {\r\n    type: SET_DIGIT,\r\n    payload: {\r\n      digit\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeDigit(): OptionActions {\r\n  return {\r\n    type: REMOVE_DIGIT\r\n  };\r\n}\r\n\r\nexport function navigateCells(direction: DIRECTION): OptionActions {\r\n  return {\r\n    type: NAVIGATE_CELLS,\r\n    payload: {\r\n      direction\r\n    }\r\n  };\r\n}","import \"./layout/index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport configureStore from \"./store\";\nimport App from \"./presentation/App\";\n\n\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}