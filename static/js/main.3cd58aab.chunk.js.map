{"version":3,"sources":["serviceWorker.ts","store/types.ts","models/Difficulty.ts","models/Cell.ts","models/Row.ts","models/Sudoku.ts","store/reducers.ts","store/index.ts","presentation/SudokuCell.tsx","presentation/SudokuRow.tsx","presentation/Input.tsx","presentation/Sudoku.tsx","presentation/DifficultySelector.tsx","presentation/Options.tsx","presentation/App.tsx","store/actions.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DIRECTION","DIFFICULTY","CHANGE_DIFFICULTY","NEW_GAME","VALIDATE_SOLUTION","TOGGLE_CELL","SET_DIGIT","REMOVE_DIGIT","NAVIGATE_CELLS","TOGGLE_NOTE_MODE","UNDO","REDO","NO_NOTES","Cell","previous","Object","classCallCheck","this","value","valid","solution","row","column","given","active","notes","concat","calculateBlock","modifier","cell","digit","isNote","map","x","i","Row","cells","index","c","validate","setActive","isActive","getColumn","setDigit","removeDigit","data","toConsumableArray","_ref","_ref2","slicedToArray","create","BASE","Sudoku","difficulty","rows","activeCell","createdAt","Easy","moveRowOrColumn","removeValues","d","cellsToRemove","Math","floor","random","y","_this$data$x$y","_this$getFromAndTo","getFromAndTo","_this$getFromAndTo2","from","to","round","moveColumn","moveRow","arguments","length","undefined","block","temp","forEach","sudoku","r","toggleCell","allNumbers","reduce","acc","next","getCells","getValue","solved","_loop","filter","n","push","dirrection","increment","val","decrement","Up","Down","Right","Left","activateCell","every","isSolved","Date","now","generateSudoku","initialState","past","current","future","noteMode","pastStates","futureStates","rootReducer","combineReducers","game","action","type","objectSpread","payload","navigate","direction","slice","SudokuCellComponent","_this","react_default","a","createElement","className","calculateClasses","style","calculateStyles","ref","onClick","handleClick","renderContent","props","getNotes","fontSize","ceil","size","key","getRow","height","width","classes","even-block-cell","getBlock","given-cell","isGiven","invalid-cell","isValid","active-cell","Array","keys","join","Component","SudokuRowComponent","getRowStyle","renderRow","rowSize","getCellSize","SudokuCell_SudokuCellComponent","assign","INPUT_HEIGHT","InputComponent","undo","toggleNoteMode","redo","SudokuComponent","possibleConstructorReturn","getPrototypeOf","call","containerRef","setCellSize","rowDOM","boundingRectangle","getBoundingClientRect","smallestDimmesion","fittedDimmension","setState","requestAnimationFrame","React","createRef","renderRows","renderSolvedOverlay","_this2","getRows","SudokuRow_SudokuRowComponent","_this3","getDifficultyText","ellapsedTime","getCreationTimestamp","marginLeft","formatMillisecons","createNewGame","milliSeconds","pad","num","toString","padStart","seconds","minutes","hours","VeryEasy","Normal","Hard","VeryHard","Insane","options","label","DifficultySelectorComponent","onChange","e","target","changeDifficulty","OptionsComponent","validateSolution","DifficultySelector","App","handleKeyboard","which","navigateCells","presentation_Options","Sudoku_SudokuComponent","presentation_Input","document","addEventListener","removeEventListener","connect","store","createStore","ReactDOM","render","es","presentation_App","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3cd58aab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Sudoku from \"../models/Sudoku\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface IGameState {\r\n  difficulty: DIFFICULTY;\r\n  sudoku: {\r\n    past: Sudoku[];\r\n    current: Sudoku;\r\n    future: Sudoku[];\r\n  };\r\n  noteMode: boolean;\r\n}\r\n\r\nexport enum DIRECTION {\r\n  Up,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n\r\nexport const CHANGE_DIFFICULTY = \"CHANGE_DIFFICULTY\";\r\nexport const NEW_GAME = \"NEW_GAME\";\r\nexport const VALIDATE_SOLUTION = \"VALIDATE_SOLUTION\";\r\nexport const TOGGLE_CELL = \"TOGGLE_CELLs\";\r\nexport const SET_DIGIT = \"SET_DIGIT\";\r\nexport const REMOVE_DIGIT = \"REMOVE_DIGIT\";\r\nexport const NAVIGATE_CELLS = \"NAVIGATE_CELLS\";\r\nexport const TOGGLE_NOTE_MODE = \"TOGGLE_NOTE_MODE\";\r\nexport const UNDO = \"UNDO\";\r\nexport const REDO = \"REDO\";\r\n\r\ninterface IChangeDifficultyAction {\r\n  type: typeof CHANGE_DIFFICULTY;\r\n  payload: DIFFICULTY;\r\n}\r\n\r\ninterface INewGameAction {\r\n  type: typeof NEW_GAME;\r\n}\r\n\r\ninterface IValidateSolutionAction {\r\n  type: typeof VALIDATE_SOLUTION;\r\n}\r\n\r\ninterface IToggleCellAction {\r\n  type: typeof TOGGLE_CELL;\r\n  payload: {\r\n    row: number;\r\n    column: number;\r\n  }\r\n}\r\n\r\ninterface ISetDigitAction {\r\n  type: typeof SET_DIGIT;\r\n  payload: {\r\n    digit: number;\r\n  }\r\n}\r\n\r\ninterface IRemoveDigitAction {\r\n  type: typeof REMOVE_DIGIT;\r\n}\r\n\r\ninterface INavigateCellsAction {\r\n  type: typeof NAVIGATE_CELLS;\r\n  payload: {\r\n    direction: DIRECTION;\r\n  }\r\n}\r\n\r\ninterface IToggleNoteModeAction {\r\n  type: typeof TOGGLE_NOTE_MODE;\r\n  payload?: {\r\n    value: boolean\r\n  }\r\n}\r\ninterface IUndoAction {\r\n  type: typeof UNDO;\r\n}\r\ninterface IRedoAction {\r\n  type: typeof REDO;\r\n}\r\n\r\nexport type OptionActions = IChangeDifficultyAction\r\n  | INewGameAction\r\n  | IValidateSolutionAction\r\n  | IToggleCellAction\r\n  | ISetDigitAction\r\n  | IRemoveDigitAction\r\n  | INavigateCellsAction\r\n  | IToggleNoteModeAction\r\n  | IUndoAction\r\n  | IRedoAction;","\r\nexport enum DIFFICULTY {\r\n  VeryEasy = 30,\r\n  Easy = 36,\r\n  Normal = 42,\r\n  Hard = 48,\r\n  VeryHard = 54,\r\n  Insane = 60\r\n\r\n}","const NO_NOTES = [false, false, false, false, false, false, false, false, false];\r\n\r\nexport default class Cell {\r\n  private value: number | null;\r\n  private valid: boolean;\r\n  private solution: number;\r\n  private row: number;\r\n  private column: number;\r\n  private given: boolean;\r\n  private active: boolean;\r\n  private notes: boolean[];\r\n\r\n  private constructor(previous?: Cell) {\r\n    this.value = previous ? previous.value : null;\r\n    this.solution = previous ? previous.solution : -1;\r\n    this.row = previous ? previous.row : -1;\r\n    this.column = previous ? previous.column : -1;\r\n    this.given = previous ? previous.given : false;\r\n    this.active = previous ? previous.active : false;\r\n    this.valid = previous ? previous.valid : true;\r\n    this.notes = previous ? previous.notes : [...NO_NOTES]\r\n  }\r\n\r\n  static create(solution: number, row: number, column: number, given: boolean): Cell {\r\n    const cell = new Cell();\r\n    cell.solution = solution;\r\n    cell.row = row;\r\n    cell.column = column;\r\n    cell.given = given;\r\n    cell.value = given ? solution : null;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public getSolution(): number {\r\n    return this.solution;\r\n  }\r\n\r\n  public getValue(): number | null {\r\n    return this.value;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public getBlock(): number {\r\n    if (this.row <= 3) {\r\n      return this.calculateBlock(0);\r\n    } else if (this.row >= 4 && this.row <= 6) {\r\n      return this.calculateBlock(1);\r\n    } else {\r\n      return this.calculateBlock(2);\r\n    }\r\n  }\r\n\r\n  private calculateBlock(modifier: number): number {\r\n    if (this.column <= 3) {\r\n      return modifier + 1;\r\n    } else if (this.column >= 4 && this.column <= 6) {\r\n      return modifier + 2;\r\n    } else {\r\n      return modifier + 3;\r\n    }\r\n  }\r\n\r\n  public isGiven(): boolean {\r\n    return this.given;\r\n  }\r\n\r\n  public validate(): Cell {\r\n    const cell = new Cell(this)\r\n    cell.valid = this.value === null || this.value === this.solution;\r\n    return cell;\r\n  }\r\n\r\n  public isValid(): boolean {\r\n    return this.valid;\r\n  }\r\n\r\n  public setActive(active: boolean): Cell {\r\n    const cell = new Cell(this);\r\n    cell.active = active;\r\n    return cell;\r\n  }\r\n\r\n  public setDigit(digit: number, isNote: boolean): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    if (isNote) {\r\n      cell.notes = this.notes.map((x, i) => i === (digit - 1) ? !x : x)\r\n    } else {\r\n      cell.value = this.value === digit ? null : digit;\r\n    }\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public removeDigit(): Cell {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    cell.notes = [...NO_NOTES];\r\n    cell.value = null;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.value === this.solution;\r\n  }\r\n\r\n  public getNotes(): boolean[] {\r\n    return this.notes;\r\n  }\r\n}\r\n","import Cell from \"./Cell\";\r\nimport { DIRECTION } from \"../store/types\";\r\n\r\nexport default class Row {\r\n  private cells: Cell[];\r\n  private index: number;\r\n  private active: boolean;\r\n\r\n  private constructor(previous?: Row) {\r\n    this.index = previous ? previous.index : -1;\r\n    this.active = previous ? previous.active : false;\r\n    this.cells = previous ? previous.cells : [];\r\n  }\r\n\r\n  static create(data: [number, boolean][], index: number): Row {\r\n    const row = new Row();\r\n    row.cells = [...data.map(([value, given], i) => Cell.create(value, index, i + 1, given))];\r\n    row.index = index;\r\n    return row;\r\n  }\r\n\r\n  public getCells(): Cell[] {\r\n    return this.cells;\r\n  }\r\n\r\n  public validate(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.validate());\r\n    return row;\r\n  }\r\n\r\n  public getIndex(): number {\r\n    return this.index;\r\n  }\r\n\r\n  public toggleCell(index: number, column: number): Row {\r\n    if (this.index !== index && !this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n\r\n    if (this.active) {\r\n      if (this.index === index) {\r\n        row.cells = this.cells.map(c => {\r\n          return c.setActive(c.isActive() ? false : c.getColumn() === column);\r\n        });\r\n      } else {\r\n        row.active = false;\r\n        row.cells = this.cells.map(c => c.isActive() ? c.setActive(false) : c);\r\n      }\r\n    } else if (this.index === index) {\r\n      row.active = true;\r\n      row.cells = this.cells.map(c => c.getColumn() === column ? c.setActive(true) : c);\r\n    }\r\n    return row;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public setDigit(digit: number, isNote: boolean): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.setDigit(digit, isNote));\r\n    return row;\r\n  }\r\n\r\n  public removeDigit(): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.removeDigit());\r\n    return row;\r\n  }\r\n\r\n}\r\n","import Row from \"./Row\";\r\nimport { DIFFICULTY } from \"./Difficulty\";\r\nimport { DIRECTION } from \"../store/types\";\r\n\r\nconst BASE = [\r\n  [3, 6, 1, 7, 2, 5, 9, 4, 8],\r\n  [5, 8, 7, 9, 6, 4, 2, 1, 3],\r\n  [4, 9, 2, 8, 3, 1, 6, 5, 7],\r\n  [6, 3, 8, 2, 5, 9, 4, 7, 1],\r\n  [1, 7, 4, 6, 8, 3, 5, 9, 2],\r\n  [2, 5, 9, 1, 4, 7, 8, 3, 6],\r\n  [7, 4, 6, 3, 9, 2, 1, 8, 5],\r\n  [9, 2, 3, 5, 1, 8, 7, 6, 4],\r\n  [8, 1, 5, 4, 7, 6, 3, 2, 9]\r\n];\r\n\r\nexport default class Sudoku {\r\n  private difficulty: DIFFICULTY;\r\n  private data: ([number, boolean][])[];\r\n  private rows: Row[];\r\n  private activeCell: { row: number, column: number };\r\n  private createdAt: number;\r\n\r\n  private constructor(previous?: Sudoku) {\r\n    this.difficulty = previous ? previous.difficulty : DIFFICULTY.Easy;\r\n    this.data = previous ? previous.data : [];\r\n    this.rows = previous ? previous.rows : [];\r\n    this.activeCell = previous ? previous.activeCell : { row: -1, column: -1 }\r\n    this.createdAt = previous ? previous.createdAt : 0;\r\n  }\r\n\r\n  static create(difficulty: DIFFICULTY): Sudoku {\r\n    const sudoku = new Sudoku();\r\n    sudoku.difficulty = difficulty;\r\n    sudoku.createdAt = Date.now();\r\n    sudoku.data = BASE.map(r => r.map(c => [c, true] as [number, boolean]));\r\n    sudoku.generateSudoku();\r\n    return sudoku\r\n  }\r\n\r\n  public getRows(): Row[] {\r\n    return this.rows;\r\n  }\r\n\r\n  private generateSudoku() {\r\n    for (let i = 0; i < 1000; i++) {\r\n      this.moveRowOrColumn();\r\n    }\r\n    this.removeValues();\r\n    this.rows = this.data.map((d, i) => Row.create(d, i + 1))\r\n  }\r\n\r\n  private removeValues() {\r\n    let cellsToRemove = this.difficulty as number\r\n    while (cellsToRemove) {\r\n      const x = Math.floor(Math.random() * 9);\r\n      const y = Math.floor(Math.random() * 9);\r\n      const [value, given] = this.data[x][y]\r\n      if (given) {\r\n        this.data[x][y] = [value, false] as [number, boolean];\r\n        --cellsToRemove;\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveRowOrColumn() {\r\n    const [from, to] = this.getFromAndTo()\r\n    if (!!Math.round(Math.random())) {\r\n      this.moveColumn(from, to);\r\n    } else {\r\n      this.moveRow(from, to);\r\n    }\r\n  }\r\n\r\n  private getFromAndTo(from: number = -1): [number, number] {\r\n    from = from === -1 ? Math.floor(Math.random() * 3) : from;\r\n    let to = Math.floor(Math.random() * 3);\r\n    if (to === from) {\r\n      return this.getFromAndTo(from);\r\n    }\r\n    const block = Math.floor(Math.random() * 3);\r\n    return [block * 3 + from, block * 3 + to];\r\n  }\r\n\r\n  private moveRow(from: number, to: number) {\r\n    const temp = this.data[to];\r\n    this.data[to] = this.data[from];\r\n    this.data[from] = temp;\r\n  }\r\n\r\n  private moveColumn(from: number, to: number) {\r\n    this.data.forEach(row => {\r\n      const temp = row[to];\r\n      row[to] = row[from];\r\n      row[from] = temp;\r\n    });\r\n  }\r\n\r\n  public validate(): Sudoku {\r\n    const sudoku = new Sudoku(this)\r\n    sudoku.rows = this.rows.map(r => r.validate());\r\n    return sudoku;\r\n  }\r\n\r\n  public activateCell(row: number, column: number): Sudoku {\r\n    const sudoku = new Sudoku(this)\r\n    sudoku.activeCell = { row, column };\r\n    sudoku.rows = this.rows.map(r => r.toggleCell(row, column));\r\n    return sudoku;\r\n  }\r\n\r\n  public setDigit(digit: number, isNote: boolean): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.setDigit(digit, isNote));\r\n    return sudoku;\r\n  }\r\n\r\n  public removeDigit(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.removeDigit());\r\n    return sudoku;\r\n  }\r\n\r\n  public getSolvedNumbers(): number[] {\r\n    const allNumbers = this.rows.reduce((acc: number[], next: Row) =>\r\n      acc.concat(next.getCells().map(c => c.getValue() || 0), []),\r\n      []\r\n    );\r\n    const solved = []\r\n    for (let i = 1; i <= 9; i++) {\r\n      if (allNumbers.filter(n => n === i).length === 9) {\r\n        solved.push(i);\r\n      }\r\n    }\r\n    return solved;\r\n  }\r\n\r\n  public navigate(dirrection: DIRECTION): Sudoku {\r\n    const increment = (val: number) => val === 9 ? 1 : val + 1;\r\n    const decrement = (val: number) => val === 1 ? 9 : val - 1;\r\n\r\n    switch (dirrection) {\r\n      case DIRECTION.Up:\r\n        this.activeCell.row = decrement(this.activeCell.row);\r\n        break;\r\n      case DIRECTION.Down:\r\n        this.activeCell.row = increment(this.activeCell.row);\r\n        break;\r\n      case DIRECTION.Right:\r\n        this.activeCell.column = increment(this.activeCell.column);\r\n        break;\r\n      case DIRECTION.Left:\r\n        this.activeCell.column = decrement(this.activeCell.column);\r\n\r\n        break;\r\n    }\r\n    return this.activateCell(this.activeCell.row, this.activeCell.column);\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.rows.every(r => r.getCells().every(c => c.isSolved()))\r\n  }\r\n\r\n  public getCreationTimestamp(): number {\r\n    return this.createdAt;\r\n  }\r\n}\r\n","import {\r\n  IGameState,\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  REMOVE_DIGIT,\r\n  TOGGLE_NOTE_MODE,\r\n  UNDO,\r\n  REDO\r\n} from \"./types\";\r\nimport Sudoku from \"../models/Sudoku\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nconst initialState: IGameState = {\r\n  difficulty: DIFFICULTY.Easy,\r\n  sudoku: {\r\n    past: [],\r\n    current: Sudoku.create(DIFFICULTY.Easy),\r\n    future: []\r\n  },\r\n  noteMode: false\r\n};\r\nconst pastStates: Sudoku[] = []\r\nconst futureStates: Sudoku[] = []\r\n\r\nexport function gameReducer(state = initialState, action: OptionActions): IGameState {\r\n  switch (action.type) {\r\n    case CHANGE_DIFFICULTY:\r\n      return {\r\n        ...state,\r\n        difficulty: action.payload,\r\n        sudoku: {\r\n          past: [],\r\n          current: Sudoku.create(action.payload),\r\n          future: []\r\n        }\r\n      };\r\n    case NEW_GAME:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [],\r\n          current: Sudoku.create(state.difficulty),\r\n          future: []\r\n        }\r\n      };\r\n    case VALIDATE_SOLUTION:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.validate()\r\n        }\r\n      };\r\n    case TOGGLE_CELL:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.activateCell(action.payload.row, action.payload.column)\r\n        }\r\n      };\r\n    case SET_DIGIT:\r\n      console.log(pastStates, futureStates);\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.setDigit(action.payload.digit, state.noteMode),\r\n          future: []\r\n        }\r\n      };\r\n    case REMOVE_DIGIT:\r\n      console.log(pastStates, futureStates);\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.removeDigit(),\r\n          future: []\r\n        }\r\n      };\r\n    case NAVIGATE_CELLS:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.navigate(action.payload.direction)\r\n        }\r\n      };\r\n    case TOGGLE_NOTE_MODE:\r\n      return {\r\n        ...state,\r\n        noteMode: action.payload ? action.payload.value : !state.noteMode\r\n      };\r\n    case UNDO:\r\n      if (!state.sudoku.past.length) {\r\n        return state;\r\n      }\r\n      const previous = state.sudoku.past.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: state.sudoku.past.slice(0, -1),\r\n          current: previous,\r\n          future: [...state.sudoku.future, state.sudoku.current]\r\n        }\r\n      }\r\n    case REDO:\r\n      if (!state.sudoku.future.length) {\r\n        return state;\r\n      }\r\n      const next = state.sudoku.future.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: next,\r\n          future: state.sudoku.future.slice(0, -1)\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\n\r\nimport { gameReducer } from \"./reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer\r\n  );\r\n\r\n  return store;\r\n}\r\n","import React, { Component, CSSProperties } from \"react\";\r\nimport \"../layout/SudokuCell.scss\";\r\nimport Cell from \"../models/Cell\";\r\nimport { toggleCell } from \"../store/actions\";\r\n\r\nexport interface ISudokuCellComponentActions {\r\n  toggleCell: typeof toggleCell\r\n}\r\n\r\nexport interface ISudokuCellComponentProps extends ISudokuCellComponentActions {\r\n  cell: Cell;\r\n  size: number;\r\n}\r\n\r\nexport default class SudokuCellComponent extends Component<\r\n  ISudokuCellComponentProps\r\n  > {\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div\r\n        className={`SudokuCell-container ${this.calculateClasses()}`}\r\n        style={this.calculateStyles()}\r\n        ref=\"cell\"\r\n        onClick={() => this.handleClick()}\r\n      >\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderContent(): JSX.Element {\r\n    const value = this.props.cell.getValue();\r\n    if (!!value) {\r\n      return (\r\n        <span className=\"SudokuCell-value\">{value}</span>\r\n      );\r\n    }\r\n    const notes = this.props.cell.getNotes();\r\n    const fontSize = `${Math.ceil((this.props.size / 3)) * 0.76}px`;\r\n    return (\r\n      <div className=\"SudokuCell-notes\">\r\n        {notes.map((x, i) => (\r\n          <span className=\"SudokuCell-note\" key={i} style={{ fontSize: fontSize }}>\r\n            {x ? i + 1 : ''}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleClick(): void {\r\n    this.props.toggleCell(this.props.cell.getRow(), this.props.cell.getColumn())\r\n  }\r\n\r\n  private calculateStyles(): CSSProperties {\r\n    const size = `${this.props.size}px`;\r\n    const fontSize = `${Math.floor(this.props.size * 0.68)}px`;\r\n    return {\r\n      height: size,\r\n      width: size,\r\n      fontSize: fontSize\r\n    };\r\n  }\r\n\r\n  private calculateClasses(): string {\r\n    const cell = this.props.cell;\r\n    const row = cell.getRow();\r\n    const classes: { [key: string]: boolean } = {\r\n      \"even-block-cell\": cell.getBlock() % 2 === 0,\r\n      \"given-cell\": cell.isGiven(),\r\n      \"invalid-cell\": cell.isValid() !== true,\r\n      \"active-cell\": cell.isActive()\r\n    };\r\n    [...Array(10)].forEach((x, i) => classes[`row-${i}-cell`] = row === i);\r\n\r\n    return Object.keys(classes).filter(key => classes[key]).join(\" \");\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Row from \"../models/Row\";\r\nimport \"../layout/SudokuRow.scss\";\r\nimport SudokuCell, { ISudokuCellComponentActions } from \"./SudokuCell\";\r\n\r\nexport interface ISudokuRowProps extends ISudokuCellComponentActions {\r\n  row: Row;\r\n  rowSize: number;\r\n}\r\n\r\nexport default class SudokuRowComponent extends Component<\r\n  ISudokuRowProps\r\n  > {\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"SudokuRow-container\" style={this.getRowStyle()}>\r\n        {this.renderRow()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getRowStyle(): React.CSSProperties {\r\n    return {\r\n      width: `${this.props.rowSize}px`,\r\n      height: `${this.getCellSize()}px`\r\n    };\r\n  }\r\n\r\n  private renderRow(): JSX.Element[] | null {\r\n    return this.props.row\r\n      .getCells()\r\n      .map((c, i) => <SudokuCell {...this.props} cell={c} size={this.getCellSize()} key={i} />);\r\n  }\r\n\r\n  private getCellSize(): number {\r\n    return this.props.rowSize / 9;\r\n  }\r\n}\r\n","import '../layout/Input.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport { setDigit, removeDigit, toggleNoteMode, redo, undo } from '../store/actions';\r\n\r\ninterface InputComponentProps {\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n  noteMode: boolean;\r\n  toggleNoteMode: typeof toggleNoteMode;\r\n  undo: typeof undo;\r\n  redo: typeof redo;\r\n}\r\n\r\nexport const INPUT_HEIGHT = 100;\r\n\r\nconst InputComponent: React.FunctionComponent<InputComponentProps> = props => {\r\n  return (\r\n    <div className=\"Input-container\" style={{ height: `${INPUT_HEIGHT}px` }}>\r\n      <div className=\"Input-numbers\">\r\n        {[...Array(10).keys()].slice(1).map(x => <button key={x} onClick={() => props.setDigit(x)}>{x}</button>)}\r\n      </div>\r\n      <div className=\"Input-utils\">\r\n        <button onClick={() => props.undo()}>Undo</button>\r\n        <button className={props.noteMode ? 'active' : ''} onClick={() => props.toggleNoteMode()}>Note</button>\r\n        <button onClick={() => props.removeDigit()}>Clear</button>\r\n        <button onClick={() => props.redo()}>Redo</button>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default InputComponent;","import React, { Component, CSSProperties } from \"react\";\r\nimport \"../layout/Sudoku.scss\";\r\nimport Sudoku from \"../models/Sudoku\";\r\nimport SudokuRow from \"./SudokuRow\";\r\nimport { ISudokuCellComponentActions } from \"./SudokuCell\";\r\nimport { INPUT_HEIGHT } from \"./Input\";\r\nimport { createNewGame } from \"../store/actions\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface ISudokuProps extends ISudokuCellComponentActions {\r\n  sudoku: Sudoku;\r\n  difficulty: DIFFICULTY;\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nexport interface ISudokuState {\r\n  rowSize: number;\r\n}\r\n\r\nexport default class SudokuComponent extends Component<ISudokuProps, ISudokuState> {\r\n  private containerRef: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: ISudokuProps) {\r\n    super(props);\r\n    this.containerRef = React.createRef();\r\n    this.state = {\r\n      rowSize: 0\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"Sudoku-container\" ref={this.containerRef} style={this.calculateStyles()}>\r\n        {this.renderRows()}\r\n        {this.renderSolvedOverlay()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private calculateStyles(): CSSProperties {\r\n    if (!this.state.rowSize) {\r\n      return {};\r\n    }\r\n    return {\r\n      height: `${this.state.rowSize}px`\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.setCellSize();\r\n  }\r\n\r\n  private setCellSize = () => {\r\n    const rowDOM = this.containerRef.current;\r\n    if (rowDOM) {\r\n      const boundingRectangle = rowDOM.getBoundingClientRect();\r\n      const height = boundingRectangle.height - INPUT_HEIGHT;\r\n      const width = boundingRectangle.width\r\n      const smallestDimmesion = height < width ? height : width;\r\n      const fittedDimmension = 9 * Math.floor(smallestDimmesion / 9)\r\n      this.setState({\r\n        rowSize: fittedDimmension\r\n      });\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        this.setCellSize();\r\n      });\r\n    }\r\n  }\r\n\r\n  private renderRows(): JSX.Element[] | null {\r\n    if (!this.state.rowSize) {\r\n      return null;\r\n    }\r\n    return this.props.sudoku.getRows().map((r, i) => (\r\n      <SudokuRow row={r} key={i} rowSize={this.state.rowSize} {...this.props} />\r\n    ));\r\n  }\r\n\r\n  private renderSolvedOverlay(): JSX.Element | null {\r\n    if (!this.props.sudoku.isSolved()) {\r\n      return null;\r\n    }\r\n\r\n    const difficulty = this.getDifficultyText();\r\n    const endTime = Date.now()\r\n    const ellapsedTime = endTime - this.props.sudoku.getCreationTimestamp();\r\n    return (\r\n      <div className=\"Sudoku-solved\" style={{\r\n        width: `${this.state.rowSize}px`,\r\n        height: `${this.state.rowSize}px`,\r\n        marginLeft: `-${this.state.rowSize / 2}px`\r\n      }}>\r\n        <div className=\"Sudoku-solved-message\">\r\n          <h1>You solved {difficulty} puzzle!</h1>\r\n          <p>Ellapsed time: <span className=\"Sudoku-ellapsed\">{this.formatMillisecons(ellapsedTime)}</span></p>\r\n          <button onClick={() => this.props.createNewGame()}>Start a new game</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private formatMillisecons(milliSeconds: number): string {\r\n    const pad = (num: number) => Math.round(num).toString().padStart(2, '0');\r\n\r\n    const seconds = pad((milliSeconds / 1000) % 60);\r\n    const minutes = pad((milliSeconds / (1000 * 60)) % 60);\r\n    const hours = pad((milliSeconds / (1000 * 60 * 60)) % 24);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  }\r\n\r\n  private getDifficultyText(): string {\r\n    switch (this.props.difficulty) {\r\n      case DIFFICULTY.VeryEasy:\r\n        return 'a very easy';\r\n      case DIFFICULTY.Easy:\r\n        return 'an easy';\r\n      case DIFFICULTY.Normal:\r\n        return 'a normal';\r\n      case DIFFICULTY.Hard:\r\n        return 'a hard';\r\n      case DIFFICULTY.VeryHard:\r\n        return 'a very hard';\r\n      case DIFFICULTY.Insane:\r\n        return 'an insane';\r\n      default:\r\n        return 'an unknown';\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { changeDifficulty } from \"../store/actions\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface IDifficultySelectorProps {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  difficulty: DIFFICULTY;\r\n}\r\n\r\nconst options = [\r\n  {\r\n    label: \"Very Easy\",\r\n    value: DIFFICULTY.VeryEasy\r\n  },\r\n  {\r\n    label: \"Easy\",\r\n    value: DIFFICULTY.Easy\r\n  },\r\n  {\r\n    label: \"Normal\",\r\n    value: DIFFICULTY.Normal\r\n  },\r\n  {\r\n    label: \"Hard\",\r\n    value: DIFFICULTY.Hard\r\n  },\r\n  {\r\n    label: \"Very Hard\",\r\n    value: DIFFICULTY.VeryHard\r\n  },\r\n  {\r\n    label: \"Insane\",\r\n    value: DIFFICULTY.Insane\r\n  }\r\n];\r\n\r\nconst DifficultySelectorComponent: React.FunctionComponent<IDifficultySelectorProps> = props => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n    const value = +e.target.value as DIFFICULTY;\r\n    props.changeDifficulty(value);\r\n  };\r\n\r\n  return (\r\n    <select className=\"Options-difficulty\" value={props.difficulty} onChange={handleChange}>\r\n      {options.map(x => (\r\n        <option value={x.value} key={x.value}>\r\n          {x.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default DifficultySelectorComponent;\r\n","import \"../layout/Options.scss\";\r\nimport React from \"react\";\r\nimport { createNewGame, validateSolution } from \"../store/actions\";\r\nimport DifficultySelector, { IDifficultySelectorProps } from \"./DifficultySelector\";\r\n\r\nexport interface INewGameButtonProps {\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nexport interface IOptionsProps extends IDifficultySelectorProps {\r\n  validateSolution: typeof validateSolution;\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nconst OptionsComponent: React.FunctionComponent<IOptionsProps> = props => {\r\n  return (\r\n    <div className=\"Options-container\">\r\n      <button className=\"Options-new\" onClick={props.createNewGame}>New Game</button>\r\n      <button className=\"Options-validate\" onClick={props.validateSolution}>Validate</button>\r\n      <DifficultySelector {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default OptionsComponent;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../layout/App.scss\";\nimport SudokuComponent from \"./Sudoku\";\nimport OptionsComponent from \"./Options\";\nimport Input from \"./Input\";\nimport { AppState } from \"../store\";\nimport { changeDifficulty, createNewGame, validateSolution, toggleCell, setDigit, removeDigit, navigateCells, toggleNoteMode, redo, undo } from \"../store/actions\";\nimport { DIFFICULTY } from \"../models/Difficulty\";\nimport Sudoku from \"../models/Sudoku\";\nimport { DIRECTION } from \"../store/types\";\n\n\ninterface IAppProps {\n  changeDifficulty: typeof changeDifficulty;\n  createNewGame: typeof createNewGame;\n  validateSolution: typeof validateSolution;\n  toggleCell: typeof toggleCell;\n  setDigit: typeof setDigit;\n  removeDigit: typeof removeDigit;\n  navigateCells: typeof navigateCells;\n  toggleNoteMode: typeof toggleNoteMode;\n  undo: typeof undo,\n  redo: typeof redo,\n  noteMode: boolean;\n  sudoku: Sudoku;\n  difficulty: DIFFICULTY;\n}\n\nclass App extends Component<IAppProps> {\n  public render(): JSX.Element {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Sudoku</h1>\n        </header>\n        <OptionsComponent {...this.props} />\n        <div className=\"App-content\">\n          <SudokuComponent {...this.props} />\n          <Input {...this.props} />\n        </div>\n      </div>\n    );\n  }\n\n\n  public componentDidMount(): void {\n    document.addEventListener(\"keydown\", this.handleKeyboard);\n  }\n\n  public componentWillUnmount(): void {\n    document.removeEventListener(\"keydown\", this.handleKeyboard);\n  }\n\n  private handleKeyboard = (e: KeyboardEvent) => {\n    const key = e.which;\n    if (key >= 49 && key <= 57) { // [1...9]\n      this.props.setDigit(key - 48);\n    } else if (key === 8 || key === 2) { // backspace || delete\n      this.props.removeDigit()\n    } else if (key === 37) { //left \n      this.props.navigateCells(DIRECTION.Left);\n    } else if (key === 38) { //up\n      this.props.navigateCells(DIRECTION.Up);\n    } else if (key === 39) { // right\n      this.props.navigateCells(DIRECTION.Right);\n    } else if (key === 40) { // down\n      this.props.navigateCells(DIRECTION.Down);\n    } else if (key === 32) { // space\n      this.props.toggleNoteMode()\n    } else if (key === 27) { // esc\n      this.props.toggleNoteMode(false)\n    }\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  sudoku: state.game.sudoku.current,\n  difficulty: state.game.difficulty,\n  noteMode: state.game.noteMode\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    changeDifficulty,\n    createNewGame,\n    validateSolution,\n    toggleCell,\n    setDigit,\n    removeDigit,\n    navigateCells,\n    toggleNoteMode,\n    undo,\n    redo\n  }\n)(App);\n","import {\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  REMOVE_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  DIRECTION,\r\n  TOGGLE_NOTE_MODE,\r\n  REDO,\r\n  UNDO\r\n} from \"./types\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport function changeDifficulty(difficulty: DIFFICULTY): OptionActions {\r\n  return {\r\n    type: CHANGE_DIFFICULTY,\r\n    payload: difficulty\r\n  };\r\n}\r\n\r\nexport function createNewGame(): OptionActions {\r\n  return {\r\n    type: NEW_GAME\r\n  };\r\n}\r\n\r\nexport function validateSolution(): OptionActions {\r\n  return {\r\n    type: VALIDATE_SOLUTION\r\n  };\r\n}\r\n\r\nexport function toggleCell(row: number, column: number): OptionActions {\r\n  return {\r\n    type: TOGGLE_CELL,\r\n    payload: {\r\n      row,\r\n      column\r\n    }\r\n  };\r\n}\r\n\r\nexport function setDigit(digit: number): OptionActions {\r\n  return {\r\n    type: SET_DIGIT,\r\n    payload: {\r\n      digit\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeDigit(): OptionActions {\r\n  return {\r\n    type: REMOVE_DIGIT\r\n  };\r\n}\r\n\r\nexport function navigateCells(direction: DIRECTION): OptionActions {\r\n  return {\r\n    type: NAVIGATE_CELLS,\r\n    payload: {\r\n      direction\r\n    }\r\n  };\r\n}\r\n\r\nexport function toggleNoteMode(value?: boolean): OptionActions {\r\n  if (value !== undefined) {\r\n    return {\r\n      type: TOGGLE_NOTE_MODE,\r\n      payload: {\r\n        value\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    type: TOGGLE_NOTE_MODE\r\n  };\r\n}\r\n\r\nexport function undo(): OptionActions {\r\n  return {\r\n    type: UNDO,\r\n  };\r\n}\r\n\r\nexport function redo(): OptionActions {\r\n  return {\r\n    type: REDO\r\n  };\r\n}","import \"./layout/index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport configureStore from \"./store\";\nimport App from \"./presentation/App\";\n\n\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}