{"version":3,"sources":["serviceWorker.ts","store/types.ts","models/Difficulty.ts","models/Cell.ts","models/Row.ts","models/Sudoku.ts","store/reducers.ts","store/index.ts","presentation/SudokuCell.tsx","presentation/SudokuRow.tsx","presentation/Input.tsx","presentation/Sudoku.tsx","presentation/DifficultySelector.tsx","presentation/Options.tsx","presentation/App.tsx","store/actions.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DIRECTION","MODE","DIFFICULTY","CHANGE_DIFFICULTY","NEW_GAME","VALIDATE_SOLUTION","TOGGLE_CELL","SET_DIGIT","REMOVE_DIGIT","NAVIGATE_CELLS","TOGGLE_NOTE_MODE","UNDO","REDO","NO_NOTES","Cell","previous","Object","classCallCheck","this","value","valid","solution","row","column","given","active","notes","guess","concat","calculateBlock","modifier","cell","digit","mode","Note","map","x","i","Guess","Row","cells","index","c","validate","setActive","isActive","getColumn","setDigit","removeDigit","data","toConsumableArray","_ref","_ref2","slicedToArray","create","BASE","Sudoku","difficulty","rows","activeCell","createdAt","Easy","moveRowOrColumn","removeValues","d","cellsToRemove","Math","floor","random","y","_this$data$x$y","_this$getFromAndTo","getFromAndTo","_this$getFromAndTo2","from","to","round","moveColumn","moveRow","arguments","length","undefined","block","temp","forEach","sudoku","r","toggleCell","allNumbers","reduce","acc","next","getCells","getValue","solved","_loop","filter","n","push","dirrection","increment","val","decrement","Up","Down","Right","Left","activateCell","every","isSolved","some","Date","now","generateSudoku","initialDifficulty","fallBack","localStorage","getItem","readDifficulty","initialState","past","current","future","Input","rootReducer","combineReducers","game","action","type","payload","setItem","toString","objectSpread","navigate","direction","SET_MODE","slice","SudokuCellComponent","_this","react_default","a","createElement","className","calculateClasses","style","calculateStyles","ref","onClick","handleClick","renderContent","props","isGuess","getNotes","fontSize","ceil","size","key","getRow","height","width","classes","even-block-cell","getBlock","given-cell","isGiven","invalid-cell","isValid","active-cell","Array","keys","join","Component","SudokuRowComponent","getRowStyle","renderRow","rowSize","getCellSize","SudokuCell_SudokuCellComponent","assign","INPUT_HEIGHT","InputComponent","toggleMode","setMode","getModeClass","isDigitSolved","disabled","undo","redo","SudokuComponent","possibleConstructorReturn","getPrototypeOf","call","containerRef","setCellSize","rowDOM","boundingRectangle","getBoundingClientRect","smallestDimmesion","fittedDimmension","setState","requestAnimationFrame","React","createRef","renderRows","renderSolvedOverlay","_this2","getRows","SudokuRow_SudokuRowComponent","_this3","getDifficultyText","ellapsedTime","getCreationTimestamp","marginLeft","formatMillisecons","createNewGame","milliSeconds","pad","num","padStart","seconds","minutes","hours","VeryEasy","Normal","Hard","VeryHard","Insane","options","label","DifficultySelectorComponent","onChange","e","target","changeDifficulty","OptionsComponent","validateSolution","DifficultySelector","App","handleKeyboard","which","navigateCells","presentation_Options","Sudoku_SudokuComponent","presentation_Input","document","addEventListener","removeEventListener","connect","store","createStore","ReactDOM","render","es","presentation_App","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3395c0e2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Sudoku from \"../models/Sudoku\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface IGameState {\r\n  difficulty: DIFFICULTY;\r\n  sudoku: {\r\n    past: Sudoku[];\r\n    current: Sudoku;\r\n    future: Sudoku[];\r\n  };\r\n  mode: MODE;\r\n}\r\n\r\nexport enum DIRECTION {\r\n  Up,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n\r\nexport enum MODE {\r\n  Input,\r\n  Note,\r\n  Guess\r\n}\r\n\r\nexport const CHANGE_DIFFICULTY = \"CHANGE_DIFFICULTY\";\r\nexport const NEW_GAME = \"NEW_GAME\";\r\nexport const VALIDATE_SOLUTION = \"VALIDATE_SOLUTION\";\r\nexport const TOGGLE_CELL = \"TOGGLE_CELLs\";\r\nexport const SET_DIGIT = \"SET_DIGIT\";\r\nexport const REMOVE_DIGIT = \"REMOVE_DIGIT\";\r\nexport const NAVIGATE_CELLS = \"NAVIGATE_CELLS\";\r\nexport const TOGGLE_NOTE_MODE = \"TOGGLE_NOTE_MODE\";\r\nexport const UNDO = \"UNDO\";\r\nexport const REDO = \"REDO\";\r\n\r\ninterface IChangeDifficultyAction {\r\n  type: typeof CHANGE_DIFFICULTY;\r\n  payload: DIFFICULTY;\r\n}\r\n\r\ninterface INewGameAction {\r\n  type: typeof NEW_GAME;\r\n}\r\n\r\ninterface IValidateSolutionAction {\r\n  type: typeof VALIDATE_SOLUTION;\r\n}\r\n\r\ninterface IToggleCellAction {\r\n  type: typeof TOGGLE_CELL;\r\n  payload: {\r\n    row: number;\r\n    column: number;\r\n  }\r\n}\r\n\r\ninterface ISetDigitAction {\r\n  type: typeof SET_DIGIT;\r\n  payload: {\r\n    digit: number;\r\n  }\r\n}\r\n\r\ninterface IRemoveDigitAction {\r\n  type: typeof REMOVE_DIGIT;\r\n}\r\n\r\ninterface INavigateCellsAction {\r\n  type: typeof NAVIGATE_CELLS;\r\n  payload: {\r\n    direction: DIRECTION;\r\n  }\r\n}\r\n\r\ninterface ISetModeAction {\r\n  type: typeof TOGGLE_NOTE_MODE;\r\n  payload: {\r\n    mode: MODE\r\n  }\r\n}\r\ninterface IUndoAction {\r\n  type: typeof UNDO;\r\n}\r\ninterface IRedoAction {\r\n  type: typeof REDO;\r\n}\r\n\r\nexport type OptionActions = IChangeDifficultyAction\r\n  | INewGameAction\r\n  | IValidateSolutionAction\r\n  | IToggleCellAction\r\n  | ISetDigitAction\r\n  | IRemoveDigitAction\r\n  | INavigateCellsAction\r\n  | ISetModeAction\r\n  | IUndoAction\r\n  | IRedoAction;","\r\nexport enum DIFFICULTY {\r\n  VeryEasy = 30,\r\n  Easy = 36,\r\n  Normal = 42,\r\n  Hard = 48,\r\n  VeryHard = 54,\r\n  Insane = 60\r\n\r\n}","import { MODE } from \"../store/types\";\r\n\r\nconst NO_NOTES = [false, false, false, false, false, false, false, false, false];\r\n\r\nexport default class Cell {\r\n  private value: number | null;\r\n  private valid: boolean;\r\n  private solution: number;\r\n  private row: number;\r\n  private column: number;\r\n  private given: boolean;\r\n  private active: boolean;\r\n  private notes: boolean[];\r\n  private guess: boolean;\r\n\r\n  private constructor(previous?: Cell) {\r\n    this.value = previous ? previous.value : null;\r\n    this.solution = previous ? previous.solution : -1;\r\n    this.row = previous ? previous.row : -1;\r\n    this.column = previous ? previous.column : -1;\r\n    this.given = previous ? previous.given : false;\r\n    this.active = previous ? previous.active : false;\r\n    this.valid = previous ? previous.valid : true;\r\n    this.notes = previous ? previous.notes : [...NO_NOTES];\r\n    this.guess = previous ? previous.guess : false;\r\n  }\r\n\r\n  static create(solution: number, row: number, column: number, given: boolean): Cell {\r\n    const cell = new Cell();\r\n    cell.solution = solution;\r\n    cell.row = row;\r\n    cell.column = column;\r\n    cell.given = given;\r\n    cell.value = given ? solution : null;\r\n    return cell;\r\n  }\r\n\r\n  public getSolution(): number {\r\n    return this.solution;\r\n  }\r\n\r\n  public getValue(): number | null {\r\n    return this.value;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public getBlock(): number {\r\n    if (this.row <= 3) {\r\n      return this.calculateBlock(0);\r\n    } else if (this.row >= 4 && this.row <= 6) {\r\n      return this.calculateBlock(1);\r\n    } else {\r\n      return this.calculateBlock(2);\r\n    }\r\n  }\r\n\r\n  private calculateBlock(modifier: number): number {\r\n    if (this.column <= 3) {\r\n      return modifier + 1;\r\n    } else if (this.column >= 4 && this.column <= 6) {\r\n      return modifier + 2;\r\n    } else {\r\n      return modifier + 3;\r\n    }\r\n  }\r\n\r\n  public isGiven(): boolean {\r\n    return this.given;\r\n  }\r\n\r\n  public validate(): Cell {\r\n    const cell = new Cell(this)\r\n    cell.valid = this.value === null || this.value === this.solution;\r\n    return cell;\r\n  }\r\n\r\n  public isValid(): boolean {\r\n    return this.valid;\r\n  }\r\n\r\n  public setActive(active: boolean): Cell {\r\n    const cell = new Cell(this);\r\n    cell.active = active;\r\n    return cell;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    if (mode === MODE.Note) {\r\n      cell.notes = this.notes.map((x, i) => i === (digit - 1) ? !x : x)\r\n    } else {\r\n      if (cell.guess) {\r\n        cell.value = digit;\r\n      } else {\r\n        cell.value = this.value === digit ? null : digit;\r\n      }\r\n    }\r\n    cell.guess = mode === MODE.Guess;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public removeDigit(): Cell {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    cell.notes = [...NO_NOTES];\r\n    cell.value = null;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.value === this.solution;\r\n  }\r\n\r\n  public getNotes(): boolean[] {\r\n    return this.notes;\r\n  }\r\n\r\n  public isGuess(): boolean {\r\n    return this.guess;\r\n  }\r\n}\r\n","import Cell from \"./Cell\";\r\nimport { DIRECTION, MODE } from \"../store/types\";\r\n\r\nexport default class Row {\r\n  private cells: Cell[];\r\n  private index: number;\r\n  private active: boolean;\r\n\r\n  private constructor(previous?: Row) {\r\n    this.index = previous ? previous.index : -1;\r\n    this.active = previous ? previous.active : false;\r\n    this.cells = previous ? previous.cells : [];\r\n  }\r\n\r\n  static create(data: [number, boolean][], index: number): Row {\r\n    const row = new Row();\r\n    row.cells = [...data.map(([value, given], i) => Cell.create(value, index, i + 1, given))];\r\n    row.index = index;\r\n    return row;\r\n  }\r\n\r\n  public getCells(): Cell[] {\r\n    return this.cells;\r\n  }\r\n\r\n  public validate(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.validate());\r\n    return row;\r\n  }\r\n\r\n  public getIndex(): number {\r\n    return this.index;\r\n  }\r\n\r\n  public toggleCell(index: number, column: number): Row {\r\n    if (this.index !== index && !this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n\r\n    if (this.active) {\r\n      if (this.index === index) {\r\n        row.cells = this.cells.map(c => {\r\n          return c.setActive(c.isActive() ? false : c.getColumn() === column);\r\n        });\r\n      } else {\r\n        row.active = false;\r\n        row.cells = this.cells.map(c => c.isActive() ? c.setActive(false) : c);\r\n      }\r\n    } else if (this.index === index) {\r\n      row.active = true;\r\n      row.cells = this.cells.map(c => c.getColumn() === column ? c.setActive(true) : c);\r\n    }\r\n    return row;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.setDigit(digit, mode));\r\n    return row;\r\n  }\r\n\r\n  public removeDigit(): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.removeDigit());\r\n    return row;\r\n  }\r\n\r\n}\r\n","import Row from \"./Row\";\r\nimport { DIFFICULTY } from \"./Difficulty\";\r\nimport { DIRECTION, MODE } from \"../store/types\";\r\n\r\nconst BASE = [\r\n  [3, 6, 1, 7, 2, 5, 9, 4, 8],\r\n  [5, 8, 7, 9, 6, 4, 2, 1, 3],\r\n  [4, 9, 2, 8, 3, 1, 6, 5, 7],\r\n  [6, 3, 8, 2, 5, 9, 4, 7, 1],\r\n  [1, 7, 4, 6, 8, 3, 5, 9, 2],\r\n  [2, 5, 9, 1, 4, 7, 8, 3, 6],\r\n  [7, 4, 6, 3, 9, 2, 1, 8, 5],\r\n  [9, 2, 3, 5, 1, 8, 7, 6, 4],\r\n  [8, 1, 5, 4, 7, 6, 3, 2, 9]\r\n];\r\n\r\nexport default class Sudoku {\r\n  private difficulty: DIFFICULTY;\r\n  private data: ([number, boolean][])[];\r\n  private rows: Row[];\r\n  private activeCell: { row: number, column: number };\r\n  private createdAt: number;\r\n\r\n  private constructor(previous?: Sudoku) {\r\n    this.difficulty = previous ? previous.difficulty : DIFFICULTY.Easy;\r\n    this.data = previous ? previous.data : [];\r\n    this.rows = previous ? previous.rows : [];\r\n    this.activeCell = previous ? previous.activeCell : { row: -1, column: -1 }\r\n    this.createdAt = previous ? previous.createdAt : 0;\r\n  }\r\n\r\n  static create(difficulty: DIFFICULTY): Sudoku {\r\n    const sudoku = new Sudoku();\r\n    sudoku.difficulty = difficulty;\r\n    sudoku.createdAt = Date.now();\r\n    sudoku.data = BASE.map(r => r.map(c => [c, true] as [number, boolean]));\r\n    sudoku.generateSudoku();\r\n    return sudoku\r\n  }\r\n\r\n  public getRows(): Row[] {\r\n    return this.rows;\r\n  }\r\n\r\n  private generateSudoku() {\r\n    for (let i = 0; i < 42e4; i++) {\r\n      this.moveRowOrColumn();\r\n    }\r\n    this.removeValues();\r\n    this.rows = this.data.map((d, i) => Row.create(d, i + 1))\r\n  }\r\n\r\n  private removeValues() {\r\n    let cellsToRemove = this.difficulty as number\r\n    while (cellsToRemove) {\r\n      const x = Math.floor(Math.random() * 9);\r\n      const y = Math.floor(Math.random() * 9);\r\n      const [value, given] = this.data[x][y]\r\n      if (given) {\r\n        this.data[x][y] = [value, false] as [number, boolean];\r\n        --cellsToRemove;\r\n      }\r\n    }\r\n  }\r\n\r\n  private moveRowOrColumn() {\r\n    const [from, to] = this.getFromAndTo()\r\n    if (!!Math.round(Math.random())) {\r\n      this.moveColumn(from, to);\r\n    } else {\r\n      this.moveRow(from, to);\r\n    }\r\n  }\r\n\r\n  private getFromAndTo(from: number = -1): [number, number] {\r\n    from = from === -1 ? Math.floor(Math.random() * 3) : from;\r\n    let to = Math.floor(Math.random() * 3);\r\n    if (to === from) {\r\n      return this.getFromAndTo(from);\r\n    }\r\n    const block = Math.floor(Math.random() * 3);\r\n    return [block * 3 + from, block * 3 + to];\r\n  }\r\n\r\n  private moveRow(from: number, to: number) {\r\n    const temp = this.data[to];\r\n    this.data[to] = this.data[from];\r\n    this.data[from] = temp;\r\n  }\r\n\r\n  private moveColumn(from: number, to: number) {\r\n    this.data.forEach(row => {\r\n      const temp = row[to];\r\n      row[to] = row[from];\r\n      row[from] = temp;\r\n    });\r\n  }\r\n\r\n  public validate(): Sudoku {\r\n    const sudoku = new Sudoku(this)\r\n    sudoku.rows = this.rows.map(r => r.validate());\r\n    return sudoku;\r\n  }\r\n\r\n  public activateCell(row: number, column: number): Sudoku {\r\n    const sudoku = new Sudoku(this)\r\n    sudoku.activeCell = { row, column };\r\n    sudoku.rows = this.rows.map(r => r.toggleCell(row, column));\r\n    return sudoku;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.setDigit(digit, mode));\r\n    return sudoku;\r\n  }\r\n\r\n  public removeDigit(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.removeDigit());\r\n    return sudoku;\r\n  }\r\n\r\n  public getSolvedNumbers(): number[] {\r\n    const allNumbers = this.rows.reduce((acc: number[], next: Row) =>\r\n      acc.concat(next.getCells().map(c => c.getValue() || 0), []),\r\n      []\r\n    );\r\n    const solved = []\r\n    for (let i = 1; i <= 9; i++) {\r\n      if (allNumbers.filter(n => n === i).length === 9) {\r\n        solved.push(i);\r\n      }\r\n    }\r\n    return solved;\r\n  }\r\n\r\n  public navigate(dirrection: DIRECTION): Sudoku {\r\n    const increment = (val: number) => val === 9 ? 1 : val + 1;\r\n    const decrement = (val: number) => val === 1 ? 9 : val - 1;\r\n\r\n    switch (dirrection) {\r\n      case DIRECTION.Up:\r\n        this.activeCell.row = decrement(this.activeCell.row);\r\n        break;\r\n      case DIRECTION.Down:\r\n        this.activeCell.row = increment(this.activeCell.row);\r\n        break;\r\n      case DIRECTION.Right:\r\n        this.activeCell.column = increment(this.activeCell.column);\r\n        break;\r\n      case DIRECTION.Left:\r\n        this.activeCell.column = decrement(this.activeCell.column);\r\n        break;\r\n    }\r\n    return this.activateCell(this.activeCell.row, this.activeCell.column);\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.rows.every(r => r.getCells().every(c => c.isSolved()))\r\n  }\r\n\r\n  public getCreationTimestamp(): number {\r\n    return this.createdAt;\r\n  }\r\n\r\n  public isDigitSolved(digit: number): boolean {\r\n    return this.rows.every(r => r.getCells().some(c => c.getValue() === digit && c.isSolved()));\r\n  }\r\n}\r\n","import {\r\n  IGameState,\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  REMOVE_DIGIT,\r\n  TOGGLE_NOTE_MODE as SET_MODE,\r\n  UNDO,\r\n  REDO,\r\n  MODE\r\n} from \"./types\";\r\nimport Sudoku from \"../models/Sudoku\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nconst initialDifficulty = readDifficulty(DIFFICULTY.Easy)\r\nconst initialState: IGameState = {\r\n  difficulty: initialDifficulty,\r\n  sudoku: {\r\n    past: [],\r\n    current: Sudoku.create(initialDifficulty).activateCell(1, 1),\r\n    future: []\r\n  },\r\n  mode: MODE.Input\r\n};\r\n\r\nexport function gameReducer(state = initialState, action: OptionActions): IGameState {\r\n  switch (action.type) {\r\n    case CHANGE_DIFFICULTY:\r\n      writeDifficulty(action.payload);\r\n      return {\r\n        ...state,\r\n        difficulty: action.payload,\r\n        sudoku: {\r\n          past: [],\r\n          current: Sudoku.create(action.payload).activateCell(1, 1),\r\n          future: []\r\n        }\r\n      };\r\n    case NEW_GAME:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [],\r\n          current: Sudoku.create(state.difficulty),\r\n          future: []\r\n        }\r\n      };\r\n    case VALIDATE_SOLUTION:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.validate()\r\n        }\r\n      };\r\n    case TOGGLE_CELL:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.activateCell(action.payload.row, action.payload.column)\r\n        }\r\n      };\r\n    case SET_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.setDigit(action.payload.digit, state.mode),\r\n          future: []\r\n        }\r\n      };\r\n    case REMOVE_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.removeDigit(),\r\n          future: []\r\n        }\r\n      };\r\n    case NAVIGATE_CELLS:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.navigate(action.payload.direction)\r\n        }\r\n      };\r\n    case SET_MODE:\r\n      return {\r\n        ...state,\r\n        mode: action.payload.mode\r\n      };\r\n    case UNDO:\r\n      if (!state.sudoku.past.length) {\r\n        return state;\r\n      }\r\n      const previous = state.sudoku.past.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: state.sudoku.past.slice(0, -1),\r\n          current: previous,\r\n          future: [...state.sudoku.future, state.sudoku.current]\r\n        }\r\n      }\r\n    case REDO:\r\n      if (!state.sudoku.future.length) {\r\n        return state;\r\n      }\r\n      const next = state.sudoku.future.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: next,\r\n          future: state.sudoku.future.slice(0, -1)\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction readDifficulty(fallBack: DIFFICULTY): DIFFICULTY {\r\n  const data = window.localStorage.getItem('DIFFICULTY');\r\n  if (!data) {\r\n    return fallBack;\r\n  }\r\n  return +data as DIFFICULTY;\r\n}\r\nfunction writeDifficulty(difficulty: DIFFICULTY) {\r\n  window.localStorage.setItem('DIFFICULTY', difficulty.toString());\r\n}","import { createStore, combineReducers } from \"redux\";\r\n\r\nimport { gameReducer } from \"./reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer\r\n  );\r\n\r\n  return store;\r\n}\r\n","import React, { Component, CSSProperties } from \"react\";\r\nimport \"../layout/SudokuCell.scss\";\r\nimport Cell from \"../models/Cell\";\r\nimport { toggleCell } from \"../store/actions\";\r\n\r\nexport interface ISudokuCellComponentActions {\r\n  toggleCell: typeof toggleCell\r\n}\r\n\r\nexport interface ISudokuCellComponentProps extends ISudokuCellComponentActions {\r\n  cell: Cell;\r\n  size: number;\r\n}\r\n\r\nexport default class SudokuCellComponent extends Component<\r\n  ISudokuCellComponentProps\r\n  > {\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div\r\n        className={`SudokuCell-container ${this.calculateClasses()}`}\r\n        style={this.calculateStyles()}\r\n        ref=\"cell\"\r\n        onClick={() => this.handleClick()}\r\n      >\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderContent(): JSX.Element {\r\n    const value = this.props.cell.getValue();\r\n    if (!!value) {\r\n      return (\r\n        <span className={`SudokuCell-value ${this.props.cell.isGuess() ? 'guess' : ''}`}>{value}</span>\r\n      );\r\n    }\r\n    const notes = this.props.cell.getNotes();\r\n    const fontSize = `${Math.ceil((this.props.size / 3)) * 0.76}px`;\r\n    return (\r\n      <div className=\"SudokuCell-notes\">\r\n        {notes.map((x, i) => (\r\n          <span className=\"SudokuCell-note\" key={i} style={{ fontSize: fontSize }}>\r\n            {x ? i + 1 : ''}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleClick(): void {\r\n    this.props.toggleCell(this.props.cell.getRow(), this.props.cell.getColumn())\r\n  }\r\n\r\n  private calculateStyles(): CSSProperties {\r\n    const size = `${this.props.size}px`;\r\n    const fontSize = `${Math.floor(this.props.size * 0.68)}px`;\r\n    return {\r\n      height: size,\r\n      width: size,\r\n      fontSize: fontSize\r\n    };\r\n  }\r\n\r\n  private calculateClasses(): string {\r\n    const cell = this.props.cell;\r\n    const row = cell.getRow();\r\n    const classes: { [key: string]: boolean } = {\r\n      \"even-block-cell\": cell.getBlock() % 2 === 0,\r\n      \"given-cell\": cell.isGiven(),\r\n      \"invalid-cell\": cell.isValid() !== true,\r\n      \"active-cell\": cell.isActive()\r\n    };\r\n    [...Array(10)].forEach((x, i) => classes[`row-${i}-cell`] = row === i);\r\n\r\n    return Object.keys(classes).filter(key => classes[key]).join(\" \");\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Row from \"../models/Row\";\r\nimport \"../layout/SudokuRow.scss\";\r\nimport SudokuCell, { ISudokuCellComponentActions } from \"./SudokuCell\";\r\n\r\nexport interface ISudokuRowProps extends ISudokuCellComponentActions {\r\n  row: Row;\r\n  rowSize: number;\r\n}\r\n\r\nexport default class SudokuRowComponent extends Component<\r\n  ISudokuRowProps\r\n  > {\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"SudokuRow-container\" style={this.getRowStyle()}>\r\n        {this.renderRow()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getRowStyle(): React.CSSProperties {\r\n    return {\r\n      width: `${this.props.rowSize}px`,\r\n      height: `${this.getCellSize()}px`\r\n    };\r\n  }\r\n\r\n  private renderRow(): JSX.Element[] | null {\r\n    return this.props.row\r\n      .getCells()\r\n      .map((c, i) => <SudokuCell {...this.props} cell={c} size={this.getCellSize()} key={i} />);\r\n  }\r\n\r\n  private getCellSize(): number {\r\n    return this.props.rowSize / 9;\r\n  }\r\n}\r\n","import '../layout/Input.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport { setDigit, removeDigit, setMode, redo, undo } from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport { MODE } from '../store/types';\r\n\r\ninterface InputComponentProps {\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n  mode: MODE;\r\n  setMode: typeof setMode;\r\n  undo: typeof undo;\r\n  redo: typeof redo;\r\n  past: Sudoku[];\r\n  future: Sudoku[];\r\n  sudoku: Sudoku;\r\n}\r\n\r\nexport const INPUT_HEIGHT = 100;\r\n\r\nconst InputComponent: React.FunctionComponent<InputComponentProps> = props => {\r\n  const toggleMode = (mode: MODE) => {\r\n    if (props.mode === mode) {\r\n      props.setMode(MODE.Input);\r\n    } else {\r\n      props.setMode(mode);\r\n    }\r\n  }\r\n\r\n  const getModeClass = (mode: MODE): string => {\r\n    if (props.mode === mode) {\r\n      return 'active';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  if (props.sudoku.isSolved()) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Input-container\" style={{ height: `${INPUT_HEIGHT}px` }}>\r\n      <div className=\"Input-numbers\">\r\n        {[...Array(10).keys()].slice(1).map(x => (\r\n          <button key={x} onClick={() => props.setDigit(x)} className={props.sudoku.isDigitSolved(x) ? 'solved' : ''}>\r\n            {x}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div className=\"Input-utils\">\r\n        <button disabled={!props.past.length} onClick={() => props.undo()}>Undo</button>\r\n        <button className={getModeClass(MODE.Note)} onClick={() => toggleMode(MODE.Note)}>Note</button>\r\n        <button onClick={() => props.removeDigit()}>Clear</button>\r\n        <button className={getModeClass(MODE.Guess)} onClick={() => toggleMode(MODE.Guess)}>Guess</button>\r\n        <button disabled={!props.future.length} onClick={() => props.redo()}>Redo</button>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default InputComponent;","import React, { Component, CSSProperties } from \"react\";\r\nimport \"../layout/Sudoku.scss\";\r\nimport Sudoku from \"../models/Sudoku\";\r\nimport SudokuRow from \"./SudokuRow\";\r\nimport { ISudokuCellComponentActions } from \"./SudokuCell\";\r\nimport { INPUT_HEIGHT } from \"./Input\";\r\nimport { createNewGame } from \"../store/actions\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface ISudokuProps extends ISudokuCellComponentActions {\r\n  sudoku: Sudoku;\r\n  difficulty: DIFFICULTY;\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nexport interface ISudokuState {\r\n  rowSize: number;\r\n}\r\n\r\nexport default class SudokuComponent extends Component<ISudokuProps, ISudokuState> {\r\n  private containerRef: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: ISudokuProps) {\r\n    super(props);\r\n    this.containerRef = React.createRef();\r\n    this.state = {\r\n      rowSize: 0\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"Sudoku-container\" ref={this.containerRef} style={this.calculateStyles()}>\r\n        {this.renderRows()}\r\n        {this.renderSolvedOverlay()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private calculateStyles(): CSSProperties {\r\n    if (!this.state.rowSize) {\r\n      return {};\r\n    }\r\n    return {\r\n      height: `${this.state.rowSize}px`\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.setCellSize();\r\n  }\r\n\r\n  private setCellSize = () => {\r\n    const rowDOM = this.containerRef.current;\r\n    if (rowDOM) {\r\n      const boundingRectangle = rowDOM.getBoundingClientRect();\r\n      const height = boundingRectangle.height - INPUT_HEIGHT;\r\n      const width = boundingRectangle.width\r\n      const smallestDimmesion = height < width ? height : width;\r\n      const fittedDimmension = 9 * Math.floor(smallestDimmesion / 9)\r\n      this.setState({\r\n        rowSize: fittedDimmension\r\n      });\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        this.setCellSize();\r\n      });\r\n    }\r\n  }\r\n\r\n  private renderRows(): JSX.Element[] | null {\r\n    if (!this.state.rowSize) {\r\n      return null;\r\n    }\r\n    return this.props.sudoku.getRows().map((r, i) => (\r\n      <SudokuRow row={r} key={i} rowSize={this.state.rowSize} {...this.props} />\r\n    ));\r\n  }\r\n\r\n  private renderSolvedOverlay(): JSX.Element | null {\r\n    if (!this.props.sudoku.isSolved()) {\r\n      return null;\r\n    }\r\n\r\n    const difficulty = this.getDifficultyText();\r\n    const endTime = Date.now()\r\n    const ellapsedTime = endTime - this.props.sudoku.getCreationTimestamp();\r\n    return (\r\n      <div className=\"Sudoku-solved\" style={{\r\n        width: `${this.state.rowSize}px`,\r\n        height: `${this.state.rowSize}px`,\r\n        marginLeft: `-${this.state.rowSize / 2}px`\r\n      }}>\r\n        <div className=\"Sudoku-solved-message\">\r\n          <h1>You solved {difficulty} puzzle!</h1>\r\n          <p>Ellapsed time: <span className=\"Sudoku-ellapsed\">{this.formatMillisecons(ellapsedTime)}</span></p>\r\n          <button onClick={() => this.props.createNewGame()}>Start a new game</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private formatMillisecons(milliSeconds: number): string {\r\n    const pad = (num: number) => Math.round(num).toString().padStart(2, '0');\r\n\r\n    const seconds = pad((milliSeconds / 1000) % 60);\r\n    const minutes = pad((milliSeconds / (1000 * 60)) % 60);\r\n    const hours = pad((milliSeconds / (1000 * 60 * 60)) % 24);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  }\r\n\r\n  private getDifficultyText(): string {\r\n    switch (this.props.difficulty) {\r\n      case DIFFICULTY.VeryEasy:\r\n        return 'a very easy';\r\n      case DIFFICULTY.Easy:\r\n        return 'an easy';\r\n      case DIFFICULTY.Normal:\r\n        return 'a normal';\r\n      case DIFFICULTY.Hard:\r\n        return 'a hard';\r\n      case DIFFICULTY.VeryHard:\r\n        return 'a very hard';\r\n      case DIFFICULTY.Insane:\r\n        return 'an insane';\r\n      default:\r\n        return 'an unknown';\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { changeDifficulty } from \"../store/actions\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport interface IDifficultySelectorProps {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  difficulty: DIFFICULTY;\r\n}\r\n\r\nconst options = [\r\n  {\r\n    label: \"Very Easy\",\r\n    value: DIFFICULTY.VeryEasy\r\n  },\r\n  {\r\n    label: \"Easy\",\r\n    value: DIFFICULTY.Easy\r\n  },\r\n  {\r\n    label: \"Normal\",\r\n    value: DIFFICULTY.Normal\r\n  },\r\n  {\r\n    label: \"Hard\",\r\n    value: DIFFICULTY.Hard\r\n  },\r\n  {\r\n    label: \"Very Hard\",\r\n    value: DIFFICULTY.VeryHard\r\n  },\r\n  {\r\n    label: \"Insane\",\r\n    value: DIFFICULTY.Insane\r\n  }\r\n];\r\n\r\nconst DifficultySelectorComponent: React.FunctionComponent<IDifficultySelectorProps> = props => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n    const value = +e.target.value as DIFFICULTY;\r\n    props.changeDifficulty(value);\r\n  };\r\n\r\n  return (\r\n    <select className=\"Options-difficulty\" value={props.difficulty} onChange={handleChange}>\r\n      {options.map(x => (\r\n        <option value={x.value} key={x.value}>\r\n          {x.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default DifficultySelectorComponent;\r\n","import \"../layout/Options.scss\";\r\nimport React from \"react\";\r\nimport { createNewGame, validateSolution } from \"../store/actions\";\r\nimport DifficultySelector, { IDifficultySelectorProps } from \"./DifficultySelector\";\r\n\r\nexport interface INewGameButtonProps {\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nexport interface IOptionsProps extends IDifficultySelectorProps {\r\n  validateSolution: typeof validateSolution;\r\n  createNewGame: typeof createNewGame;\r\n}\r\n\r\nconst OptionsComponent: React.FunctionComponent<IOptionsProps> = props => {\r\n  return (\r\n    <div className=\"Options-container\">\r\n      <button className=\"Options-new\" onClick={props.createNewGame}>New Game</button>\r\n      <button className=\"Options-validate\" onClick={props.validateSolution}>Validate</button>\r\n      <DifficultySelector {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default OptionsComponent;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../layout/App.scss\";\nimport SudokuComponent from \"./Sudoku\";\nimport OptionsComponent from \"./Options\";\nimport Input from \"./Input\";\nimport { AppState } from \"../store\";\nimport { changeDifficulty, createNewGame, validateSolution, toggleCell, setDigit, removeDigit, navigateCells, setMode, redo, undo } from \"../store/actions\";\nimport { DIFFICULTY } from \"../models/Difficulty\";\nimport Sudoku from \"../models/Sudoku\";\nimport { DIRECTION, MODE } from \"../store/types\";\n\n\ninterface IAppProps {\n  changeDifficulty: typeof changeDifficulty;\n  createNewGame: typeof createNewGame;\n  validateSolution: typeof validateSolution;\n  toggleCell: typeof toggleCell;\n  setDigit: typeof setDigit;\n  removeDigit: typeof removeDigit;\n  navigateCells: typeof navigateCells;\n  setMode: typeof setMode;\n  undo: typeof undo,\n  redo: typeof redo,\n  mode: MODE;\n  sudoku: Sudoku;\n  past: Sudoku[];\n  future: Sudoku[];\n  difficulty: DIFFICULTY;\n}\n\nclass App extends Component<IAppProps> {\n  public render(): JSX.Element {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Sudoku</h1>\n        </header>\n        <OptionsComponent {...this.props} />\n        <div className=\"App-content\">\n          <SudokuComponent {...this.props} />\n          <Input {...this.props} />\n        </div>\n      </div>\n    );\n  }\n\n\n  public componentDidMount(): void {\n    document.addEventListener(\"keydown\", this.handleKeyboard);\n  }\n\n  public componentWillUnmount(): void {\n    document.removeEventListener(\"keydown\", this.handleKeyboard);\n  }\n\n  private handleKeyboard = (e: KeyboardEvent) => {\n    const key = e.which;\n    if (key >= 49 && key <= 57) { // [1...9]\n      this.props.setDigit(key - 48);\n    } else if (key === 8 || key === 2) { // backspace || delete\n      this.props.removeDigit()\n    } else if (key === 37) { //left \n      this.props.navigateCells(DIRECTION.Left);\n    } else if (key === 38) { //up\n      this.props.navigateCells(DIRECTION.Up);\n    } else if (key === 39) { // right\n      this.props.navigateCells(DIRECTION.Right);\n    } else if (key === 40) { // down\n      this.props.navigateCells(DIRECTION.Down);\n    } else if (key === 32) { // space\n      this.props.setMode(this.props.mode !== MODE.Note ? MODE.Note : MODE.Input)\n    } else if (key === 27) { // esc\n      this.props.setMode(MODE.Input)\n    }\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  sudoku: state.game.sudoku.current,\n  past: state.game.sudoku.past,\n  future: state.game.sudoku.future,\n  difficulty: state.game.difficulty,\n  mode: state.game.mode\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    changeDifficulty,\n    createNewGame,\n    validateSolution,\n    toggleCell,\n    setDigit,\n    removeDigit,\n    navigateCells,\n    setMode,\n    undo,\n    redo\n  }\n)(App);\n","import {\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  REMOVE_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  DIRECTION,\r\n  TOGGLE_NOTE_MODE,\r\n  REDO,\r\n  UNDO,\r\n  MODE\r\n} from \"./types\";\r\nimport { DIFFICULTY } from \"../models/Difficulty\";\r\n\r\nexport function changeDifficulty(difficulty: DIFFICULTY): OptionActions {\r\n  return {\r\n    type: CHANGE_DIFFICULTY,\r\n    payload: difficulty\r\n  };\r\n}\r\n\r\nexport function createNewGame(): OptionActions {\r\n  return {\r\n    type: NEW_GAME\r\n  };\r\n}\r\n\r\nexport function validateSolution(): OptionActions {\r\n  return {\r\n    type: VALIDATE_SOLUTION\r\n  };\r\n}\r\n\r\nexport function toggleCell(row: number, column: number): OptionActions {\r\n  return {\r\n    type: TOGGLE_CELL,\r\n    payload: {\r\n      row,\r\n      column\r\n    }\r\n  };\r\n}\r\n\r\nexport function setDigit(digit: number): OptionActions {\r\n  return {\r\n    type: SET_DIGIT,\r\n    payload: {\r\n      digit\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeDigit(): OptionActions {\r\n  return {\r\n    type: REMOVE_DIGIT\r\n  };\r\n}\r\n\r\nexport function navigateCells(direction: DIRECTION): OptionActions {\r\n  return {\r\n    type: NAVIGATE_CELLS,\r\n    payload: {\r\n      direction\r\n    }\r\n  };\r\n}\r\n\r\nexport function setMode(mode: MODE): OptionActions {\r\n  return {\r\n    type: TOGGLE_NOTE_MODE,\r\n    payload: {\r\n      mode\r\n    }\r\n  }\r\n}\r\n\r\nexport function undo(): OptionActions {\r\n  return {\r\n    type: UNDO,\r\n  };\r\n}\r\n\r\nexport function redo(): OptionActions {\r\n  return {\r\n    type: REDO\r\n  };\r\n}","import \"./layout/index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport configureStore from \"./store\";\nimport App from \"./presentation/App\";\n\n\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}